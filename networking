# ifconfig
  used to initialize network interfaces and to enable/disable network interfaces
  promiscuous mode: a network card never drops a packet
  MTU(maximun transmission unit): the maximun number of octects the interface can handle in
    one transaction (default: 1500)
  1) ifconfig eth0
  2) ifconfig -a
  3) ifconfig eth0 up (ifup eth0)
  4) ifconfig eth0 down (ifdown eth0)
  5) ifconfig eth0 192.168.2.2 ==> assign the IP address to an interface
  6) ifconfig eth0 promisc, ifconfig eth0 -promisc

# ethtool: view and change ethernet device parameters
  1) ethtool eth0: list ethernet device properties
  2) ethtool -s eth0 autoneg off: turn off auto-negotiation

# default ports:
  SMTP: 25
  DNS: 53
  FTP: 20 (data transfer), 21 (connection established)
  DHCP: 67 (UDP, DHCP server), 63 (UDP, DHCP client)
  SSH: 22
  Squid: 3128

# what is network bonding?
  the aggregation of multiple LAN cards into a single bonded interface to provide fault
    tolerance and high performance (a.k.a NIC teaming)

# how to check default route and routing table?
  netstat -nr: default route
  route -n: routing table (-n: not resolve names)
  ex.
    Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
    10.240.80.0     0.0.0.0         255.255.254.0   U     0      0        0 eth0
    169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth0
    0.0.0.0         10.240.80.1     0.0.0.0         UG    0      0        0 eth0
  (10.240.80.0: host's network, 10.240.80.1: destination, Flags: U (Up), G (Gateway))

# how to check which port are listening in my system?
  netstat --listen
  lsof -i

# hostname: display the machine's hostname
  hostname -d: display the domain name the machine belongs to
  hostname -f: display the fully qualified host and domain name
  hostname -i: display the IP address for the current machine

# ping: send packets to destination device, the destination device will send packets back
  two purposes: 1. ensure network connection can be established (Layer 3 health check: IP)
                2. timing information such as the speed of the connection
  ex. ping [hostname/host_ip]
 
  ping -c 5 gmail.com ==> ping a remote host by sending only 5 packets

# telnet: used to communicate with a host through the TELNET protocol 
  - often used to check if a host is listening on a port (Layer 7 health check: TELNET)
    ex. telnet [hostname/host_ip] 80
  - send commands to the host, ex. HELO/GET
  - press Ctrl + ] to go back to the interactive mode, then type quit to exit
 
# nc: arbitrary TCP and UDP connections and listens
  often used to check if a host is listening on a port (Layer 4 health check: TCP/UDP)
    options:
     -w: timeout, if connection/stdin are idle for timeout seconds, then connection is closed
     -v: verbose output
     -X proxy_protocol: supported protocols are 4 (SOCKS v.4), 5 (SOCKS v.5), connect (HTTPS proxy)
     -x <proxy_address>[:<port>]:
       requests that nc should connect to hostname using a proxy at <proxy_address> and <port>
       if port is not specified, the well-known port for the proxy protocol is used 
       (1080 for SOCKS, 3128 for HTTPS)
  ex.
    nc -w 1 <host> 4080 -v
    nc -X 5 -x localhost:9999 (ex. used for local forwarding)
    nc -z <host> <port>: check if the port is open, exiting with 0 on success, 1 on failure
      -z: just scan for listening daemons, without sending any data to them

# check if a host is listening on a port
  1) telnet (Layer 7: TELNET health check)
     ex. telnet <fqdn> 4080
  2) nc (Layer 4: TCP/UDP health check)
     ex. nc -w 1 <fqdn> 4080 -v

# netstat: finding information of connection to and from the host
  display network connections, routing tables, interface statistics, multicast memberships,
    masquerade connections, etc.
   netstat -a: display all connections including TCP and UDP connections
   netstat -t: display only TCP connection (netstat -at: list all tcp ports including LISTEN)
   netstat -u: display only UDP connection (netstat -lu: list all udp LISTEN ports)
   netstat -g: display all multicast network subscribed by this host
   netstat -s: show statistics for each protocol (protocol: TCP/IP/ICMP/UDP)
   netstat -p: show PID/program names (netstat -pt: show tcp connections)
     ex. netstat -ap | grep ssh (find out which port a program is using)
         netstat -an | grep ':80' (find out which process is using port 80)
   netstat -r: display the kernel routing information
   netstat -i: display the list of network interfaces
   netstat -anp: not resolve hostnames/portnames/usernames, show PID/Program
   ex. how to find which remote hosts are connecting to you on a particular port, ex. 10123?
       command: netstat -a | grep "10123"

# ss: another utility to investigate sockets
  options:
    -n: numeric
    -a: display all sockets
    -p: show process using socket
  ss -l: display all listening ports
  ss -o state established: display only established connections
  ss -s: display socket summary statistics
  ss -r: resolve address and port 

# nslookup: query Internet name servers interactively
  1) find the hostname in your network using an IP address, or vice versa?
     nslookup [host_ip]
     nslookup [hostname]
  2) find all IP addresses for a given domain name
     nslookup www.google.com

# host: DNS lookup utility
  a simple utility for performing DNS lookups. It is normally used to convert names to IP addresses and vice versa

# traceroute: view the number of hops and response time to get to a remote system

# finger: view user information such as user login name/real time/terminal name/write status
 
# what is private IP?
  there are 3 IP ranges reserved for private address that are not valid for internet use
  class A: 10.0.0.0 - 10.255.255.255 (256 * 256 * 256)
  class B: 172.16.0.0 - 172.31.255.255 (16 * 256 * 256)
  class C: 198.168.0.0 - 192.168.255.255 (256 * 256)

# what is the benefit of subnetting?
  provide a way to secure network traffic by isolating it from the rest of network
  reduce network traffic (broadcast traffic can be isolated within a single logical network)
  reduce the size of routing table

# what is the difference between static and dynamic IPs?
  static IP: IP address is configured to the same IP address
  dynamic IP: IP address may change periodically and is managed by a centralized network device

# what is DHCP scope?
  a range or pool of IP addresses that can be leased to DHCP clients on a given subnet

# what is FQDN?
  fully qualified domain name which contains both hostname and domain name
  it uniquely identifies a host within a DNS hierarchy

# what is the DNS forwarder?
  DNS servers often need to communicate with DNS servers outside of the local network
  when a DNS server receives DNS queries that it cannot resolve locally, it then forwards
  the queries to external DNS servers for resolution

# Differentiated Services Code Point (DSCP)
  a field in IP packet used to differenticate services

# ip: show / manipulate routing, devices, policy routing and tunnels
  combine ifconfig + route commands
  ip -s: statistics
  ip route show / ip r: list routes
  (displays the contents of the routing tables or the route(s) selected by some criteria)
  ex.
    10.240.80.0/23 dev eth0  proto kernel  scope link  src 10.240.80.73 
    169.254.0.0/16 dev eth0  scope link  metric 1002

# arp: Address Resolution Protocol 
  1) manipulate the system ARP cache
  2) local host sends arp packages to all the hosts in the subnet to obtain their MAC addresses
    which will be written into the arp table

  commands:
    arp: prints content of the ARP table 
      Address                  HWtype  HWaddress           Flags Mask            Iface
      ha1.vl-144.bas-1-prd.sg  ether   00:00:0c:9f:f0:01   C                     eth0

    arp -n: not resolve name, get the IP/MAC mapping info from the arp table
      Address                  HWtype  HWaddress           Flags Mask            Iface
      10.240.80.1              ether   00:00:0c:9f:f0:01   C                     eth0

    arp -s <ip address> <hardware address>: add new ARP entry

    arp -d <ip address> / <hardware address>: delete ARP entry

# arping: send ARP REQUEST to a neighbour host
  1) arping utility performs an action similar to ping, but at the Ethernet layer
  2) ping tests the reachability of an IP address
     arping reports the reachability and round-trip time of an IP address hosted on local network

  example:
    arping -I eth0 -c 2 192.168.100.17

    ARPING 192.168.100.17 from 192.168.100.254 eth0
    Unicast reply from 192.168.100.17 [00:80:C8:E8:4B:8E]  8.419ms
    Unicast reply from 192.168.100.17 [00:80:C8:E8:4B:8E]  2.095ms
    Sent 2 probes (1 broadcast(s))
    Received 2 response(s)

    -c 2: 2 times
    -I <interface>: name of network device where to send ARP REQUEST packets (required)
    -U: send a broadcast arp
        unsolicited ARP mode to update neighbours' ARP caches (no replies expected)
    -A: send a gratuitous reply
        same as -U, but ARP REPLY packets used instead of ARP REQUEST

# change MAC address
  1) MacOS
    sudo ifconfig en0 lladdr ac:bc:32:c3:cc:c3
  2) CentOS/RHEL
    2.1) add the following line to /etc/sysconfig/network-scripts/ifcfg-eth0
        MACADDR=ac:bc:32:c3:cc:c3
    2.1) restart the network service
        service network restart
        ifconfig eth0

# nmap: network exploration tool and security / port scanner
  1) sudo nmap -sS -p 80 <fqdn>
    -sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans ==> SCAN TECHNIQUES
    -p <port ranges>: only scan specific ports, ex. -p22; -p1-65535
    result:
    Host is up (0.036s latency).
    PORT     STATE    SERVICE
    9090/tcp filtered unknown     ==> STATE: open (the server is listening on the port)
  2) nmap -sN 192.168.2.0/24 OR nmap -sN 192.168.2.1-200
     network ip range scan, find out which servers and devices are up and running
     -sN; -sF; -sX (TCP NULL, FIN, and Xmas scans)
     -sN: does not set any bits (TCP flag header is 0)
  3) nmap -F 192.168.1.1
     -F: fast mode, scan fewer ports than the default scan
  4) sudo nmap -O <remote_host>
     scan for the host operating system

# DNS: A record
  1) A record (A: Address) maps a domain name to the IP address (IPv4) of the computer hosting the domain
  2) the simplest type of DNS records, yet one of the primary records used in DNS servers
  3) multiple A records for the same domain in order to provide redundancy
     i.e. multiple names could point to the same IP address, each would have its own A record pointing to
     the that same IP address
  4) use dig to determine the A record associated to a domain name
     ex. dig A api.dnsimple.com

     ;; ANSWER SECTION:
     api.dnsimple.com.	59	IN	A	208.93.64.253

     api.dnsimple.com: fully-qualified domain name (FQDN)
     59: the remaining time-to-live (TTL) in seconds, i.e. 59 seconds
     208.93.64.253: the IP address

# DNS: CNAME
  1) CNAME (Canonical Name): used to alias one name to another
  2) add a CNAME record that points <NEW_NAME>.example.com to <ORIGINAL_NAME>.example.com
     ex. dig search.yahoo.com

     ;; ANSWER SECTION:
     search.yahoo.com.	300	IN	CNAME	ds1-global.l7.search.ystg1.b.yahoo.com.
     ds1-global.l7.search.ystg1.b.yahoo.com.	14 IN A	68.142.242.215

     search.yahoo.com is a CNAME of ds1-global.l7.search.ystg1.b.yahoo.com 

# tcpdump: a network packet analyzer
  allows us to save the packets captured. one can use wireshark to read the tcpdump pcap files
  1) tcpdump -i eth0 (-i: interface): capture packets from an interface
  2) tcpdump -A -i eth0 (-A: in ASCII): display captured packets in ASCII
  3) tcpdump -w filename.pcap -i eth0: write captured packets to a file
  4) tcpdump -tttt -r filename.pcap: read captured packets from a saved file
     (-tttt: proper readable timestamp)
  5) sudo tcpdump -i eth0 -A -s 0 -w filename.pcap 'port 80'
     monitor traffic on port 80
  6) sudo tcpdump -i eth0 -A -s 0 -w - | strings
     -s <num>: snarf snaplen bytes of data from each packet rather than the default of 65535 bytes
     -s 0: setting snaplen to 0 sets it to 65535 (by default, will not show full packets, so use -s 0 to disable that)
  7) sudo tcpdump -i eth0 -n 'src host 10.194.148.45' -w - | strings
     src host <ip>: filter packets by source ip address
     strings: print the strings of printable characters, ex. ASCII
     (only prints the strings from the initialized and loaded sections of object files)
  8) sudo tcpdump -A -vvv 'port 4080'
     -v, -vv, -vvv: verbose output
