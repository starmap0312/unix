# SSL: Secure Socket Layer
  1) a protocol which secures communication between the client browser and the web server
  2  SSL channel is encrypted and authenticated
     a) server authentication is MANDATORY (ex. client browser MUST authenticate the web server to 
        which it is talking)
     b) Client-side authentication is OPTIONAL
  3) enabling SSL on the server side involves compiling the mod_ssl module into apache,
     configuring apache to start SSL and configuring a server-side certificate for apache
  2) SSL certificate contains a public key and certificate issuer
  3) clients use the certificate to communicate with a server
  4) clients can verify the certificate was signed by an official Certificate Authority
  5) clients can communicate with the server they expect and the network traffic are encrypted

# Differences between SSL and HTTPS
  1) SSL (Secure Socket Layer) or TLS (Transport Layer Security) works on top of
     transport layer (i.e. TCP)
  2) TLS can be used for HTTPS
  3) stack
     HTTP:  HTTP              -- TCP -- IP -- Ethernet
     HTTPS: HTTP -- TLS (SSL) -- TCP -- IP -- Ethernet

# openssl: OpenSSL command line tool
  1) a cryptography toolkit implementing the Secure Sockets Layer (SSL v2/v3) and
       Transport Layer Security (TLS v1) network protocols
  2) used for:
       a) Creation and management of private keys, public keys and parameters
       b) Public key cryptographic operations
       c) Creation of X.509 certificates, CSRs and CRLs
       d) Calculation of Message Digests
       e) Encryption and Decryption with Ciphers
       f) SSL/TLS Client and Server Tests
       g) Handling of S/MIME signed or encrypted mail
       h) Time Stamp requests, generation and verification

  openssl command [ command_opts ] [ command_args ]

  example:
    Generate a CSR with OpenSSL
    a) Generate the RSA key
       openssl genrsa: generation of RSA Private Key (default: 1024 bit long modulus)
       openssl genrsa -out server.key 2048
         generation of 2048-bit RSA private key
         the private key file for that server, need to install it on web server with the .crt file
    b) Create a CSR
       openssl req: PKCS#10 X.509 Certificate Signing Request (CSR) Management
       openssl req -new -sha256 -key server.key -out file.csr
         need to enter a Distinguished Name (DN): information to be displayed in the certificate
         .csr (Certificate Signing Request) file: is sent to the CA (Certificate Authority)
         so that they can process the request and send back a .crt (certificate) file
    c) Verify your CS
       openssl req -noout -text -in csr_file
         Subject, Subject Public Key Info, etc.
    d) Submit your CSR
       submit your CSR to a certificate authority (ex. Verisign, Thawte and RapidSSL)
       when CA approves the certificate, the person who requested the certificate gets a .crt file
       this is the actual certificate that needs to be installed on the web server

# Privacy Enhanced Mail (PEM): ex. xxx.pem or xxx.key files
  1) xxx.csr file:
     a Certificate Signing Request
     applications can generate these for submission to certificate-authorities (CA)
     it includes some/all of the key details of the requested certificate such as subject, organization, state, whatnot, and
       the "public key" of the certificate to get signed
     these get signed by the CA and a certificate is returned, i.e. .crt file
       the returned certificate is the public certificate (which includes the "public key" but not the private key)
  2) xxx.crt file:
     .pem (or rarely .der) formatted file with a different extension
     it is recognized by Windows Explorer as a certificate, which .pem is not
  3) xxx.pem file:
     a container format that may:
       include just the "public certificate" (ex. with Apache installs, and CA certificate files /etc/ssl/certs), or
       include an entire "certificate chain" including "public key, private key, and root certificates"
     it it is a base64 translation of the x509 ASN.1 keys
  4) xxx.key file:
     a PEM formatted file containing just the "private-key" of a specific certificate, ex. /etc/ssl/private of Apache installs
     the rights on these files are very important, and some programs will refuse to load these certificates if they are set wrong

# digital signature
1) definition: 
   sender:
     message digest = hash(clear message)
     digital signature = encrypt_by_private_key(message digest)
   receiver:
     message digest = hash(clear message)
     decrypt_by_public_key(digital signature)
     check if the above two are identical, if so, then the clear message is not modified
2) http://david50.pixnet.net/blog/post/28798505-%5B%E7%AD%86%E8%A8%98%5Ddigital-signature-%E6%95%B8%E4%BD%8D%E7%B0%BD%E7%AB%A0

# SSL X.509 Certificate
1) hierarchical
   Root CA -> some trusted CA -> Certificate
2) public key certificate: 
   (public key certificate) = some trusted CA provides a (digital signature) of the (public key of domain abc.com)
   user uses (public key of some trusted CA) to verify if the (public key of domain abc.com) is modified
   if not, then user can be sure that (public key of domain abc.com) is not modified, provided the trusted CA's guarantee
   use then send encrpt_by_public_key(secret data) to domain abc.com, since only domain abc.com can decrpt_by_private_key(encrpted_secret_data)
3) http://www.study-area.org/tips/certs/certs.html
