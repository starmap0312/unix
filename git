# revert to previous commit and make it a new commit
  git rm -r .           # remove all files
  git checkout HEAD~3 . # path specifier: overwrite all matching files (all files match dot)
  git commit            # make a new commit

# checkout a file from a previous commit
  git checkout xxxxxx /path/to/file (xxxxx is the commit number)

# discard unstaged changes of all files
  git checkout .

# checkout a previous commit and return
  git checkout 919f085276696c26a818a50c8d5652fb16625e28
  git checkout [branch_name]
  git checkout 919f085276696c26a818a50c8d5652fb16625e28 path/to/filename # checkout out a specific file from a given commit

# git add
  git add -A
    -A, --all: all files in the entire working tree are updated
  git add --update
    -u, --update: all tracked files in the entire working tree are updated

# git pull: fetch from and integrate with a local branch
  git pull [--rebase] [repo] [branch]
  1) merge remote origin/master
     git pull
     (is equal to)
     git pull origin master
     (is equal to)
     git fetch origin master
     git merge origin/master
  2) merge remote upstream/master
     git pull upstream master
     (is equal to)
     git fetch upstream master
     git merge upstream/master
  3) with --rebase, it runs git rebase instead of git merge
     git pull --rebase upstream master
     (is equal to)
     git fetch upstream master
     git rebase upstream/master

# git push == git push origin master

# git remote -v: view all remote repos

# push local master branch to a remote origin repo
  git init
  (edit & git commit files)
  git remote add origin git@github.com/OWNER/REPOSITORY.git
  git push origin master (git push -u origin master)

# set up the upstream repo for the remote origin repo
  git clone git@github.com/FORKED_REPO.git
  git remote add upstream https://github.com/ORIGINAL_REPO.git
  sync with upstream
    1) git checkout master       ==> checkout local master branch
    2) git fetch upstream        ==> fetch upstream repo
       git merge upstream/master ==> merge upstream/master to local master branch
       or 
       git pull upstream         ==> git fetch upstream + git merge upstream/master
       (git pull upstream master ==> get the newest code from original repo to local repo)
    3) git push origin master    ==> push local master branch to forked personal GitHub (edit & git commit files)

# git push
  git push origin <branch_name>      => push local branch_name to remote repo)
  git push -f origin <branch_name>   => force push
  git push == git push origin master
  
# create local branch and push to remote
  git checkout -b branch_name
  (create a local branch which is a duplicate of the master branch)
  git push -u origin branch_name
    -u, --set-upstream: for every branch pushed, add upstream (tracking) reference
                        used by argument-less git-pull
    (push local branch to remote)
  git checkout --orphan branch_name
    (create a local and isolated branch)
  git branch -a 
    (-a, --all: list both remote-tracking and local branches)

# create a local branch that tracks a remote branch
  1) create a remote branch
     git remote add [remote_branch] git@github.com/OWNER/REPOSITORY.git
  2) create a local branch that tracks the remote branch
     git branch --track branch_name [remote_branch]/branch_name
     git checkout -b branch_name [remote_branch]/branch_name (create a local branch tracking remote branch and switch to that branch)

# delete a branch
  git branch -d <local_branch>
  git push origin --delete <remote_branch> OR git push origin :<remote_branch>

# git fetch: download objects and refs from another repository
  git fetch upstream: fetch original remote repo
  git fetch origin: fetch personal remote repo
  git fetch --all: fetch all remotes (origin and upstream)

# git pull: fetch from and merge with a local branch
  git pull upstream: fetch original remote repo and merge with local branch
  git pull origin: fetch personal remote repo and merge with local branch
  git pull --all: fetch all remotes (origin and upstream) and merge with local branch

# git checkout: switch branches or restore working tree files
  git checkout -f [branch]
  -f, --force: proceed even if the index or the working tree differs from HEAD,
               used to throw away local changes

# git reset: reset current HEAD to the specified state, i.e. change where the HEAD is pointing
  git reset HEAD: unstage all staged modified files
    HEAD: a reference to the last commit in the current branch
  git reset HEAD <filename>: unstage a staged modified file
  git reset --hard HEAD~3: the last 3 versions: HEAD, HEAD^ (shorthand for HEAD^1 or HEAD~1), and HEAD~2 (HEAD^1^1) are dropped
  git reset HEAD^1
  git reset --hard HEAD^1


# reference parent commit
  because git commits can have more than one parent, we can refer in the order from left-to-right (HEAD^1: leftmost parent, HEAD^2: second parent, HEAD^3: third parent)
  ex.
  D   E   F
    B   C
      A

  A
  B = A^    = A^1 = A~1
  C =       = A^2
  D = A^^   = A^1^1 = A~2
  E = A^^2  = A^1^2

# git reset --soft <commit> vs. git reset --hard <commit>

  unstaged  -- (git add) --> staged -- (git commit) --> commited

  ex.
    A - B - C (master)
  git reset --soft B
    HEAD points to B
    git status: staged (the index still has the changes from C, waiting to be commited)
  git reset --mixed B (default)
    HEAD points to B
    git status: unstaged (the index still has the changes from C, waiting to be staged)
    i.e. git reset B = git reset --mixed B = git reset --soft B + git reset HEAD [all staged files]
  git reset --hard B
    HEAD points to B
    git status: lose changes permanently

  ex.
    git reset --hard HEAD~3
      the last 3 versions: HEAD, HEAD^, and HEAD~2 are dropped

# differences of git fork and clone
  clone: clone a GitHub repo on local workstation
  (need to be declared as a contributor to contribute back to the remote repository,
   need to create a pull request)

  fork:
    1) clone a GitHub repo on the server side, i.e. clone a GitHub repo on your GitHub account
       (can make changes to that forked GitHub repo)
    2) can only contribute to the forked repo
    3) if want to contribute to the upstream (original) repo, you need to create a pull request
       to signal contribution back to the upstream repo
    
    Original (upstream/master)  --> Forked (origin/master)
         |                             |
         ------> Local (master) <-------

# git merge
  git checkout feature        (on feature branch)
  1) git merge --ff-only      (merge master branch by fast-forward and error out if not possible)
     ex. git pull --ff-only   (a safe way to merge the origin/master branch)
         (is equal to)
         git fetch origin
         git merge --ff-only origin/master
  2) git merge --ff master    (default: merge master branch by fast-forward if possible; otherwise, keep the feature branch)
  3) git merge --no-ff master (always merge master branch without fast-forward)
     this keeps the commit feature at a separate branch even though it can be fast-forward merged
     ex.
         (--no-ff)             (-ff)
         master feature        master
           x                     x
           |        x            x     feature
           |        x            x
           --- x ---|            x
               x                 x

# answering a pull request: merge devel branch into master branch
  Step 1)
    git fetch origin
    git checkout -b devel origin/devel
    git merge master
  Step 2)
    git checkout master
    git merge --no-ff devel (no fast-forward when merging, used for new feature branch)
    git push origin master (update on GitHub)

# show git log graph
  git log --graph --abbrev-commit --decorate

# config user and email
  git config --global user.name "John Doe"
  git config --global user.email johndoe@example.com

# resolve conflicts from command-line
  merge a <remote_branch> of <remote_repo> to the master branch
  1) check out a new branch and test the changes
     git checkout -b <new-branch-for-merge> master                          <== create a new branch for merging
     git pull git@git.com:<git_account>/<remote_repo>.git <remote_branch> <== try to pull the <remote_branch>
     (the pull shows warning messages of conflicts)
  2) edit conflicted files manually and commit the changes
     git commit -am 'resolve the conflicts'
  2) merge the changes to master branch and push the update to GitHub
     git checkout master
     git merge --no-ff <new-branch-for-merge>
     git push origin master

# git diff
  git diff <branch1> <branch2>: diff two branches
  git diff --numstat:
    similar to --stat, but shows number of added and deleted lines in decimal notation and pathname without abbreviation
    ex. 2       0       filename1 (2 added lines and 0 deleted line)
        2       1       filename2 (2 added lines and 1 deleted line)

# git rebase [branch]
  ex. git history 
     v1 -> v2 -> v3.1         ... master
           |---> v3.2         ... dev

  1) git checkout dev
  2) git rebase master
     v1 -> v2 -> v3.1         ... master
           |---> v3.1 -> v3.2 ... dev   (need to resolve conflicts if any)

  3) git push origin dev      ... origin/dev (push local dev branch to remote origin/dev)
     git push origin dev -f                  (force push if needed)
  4) create PR to merge orign/dev into upstream/master
  5) git checkout master
     git merge dev OR git pull upstream/master (after the commits are merged into upstream/master)
       v1 -> v2 -> v3.1 -> v3.2 ... master & dev

# git rebase -i [commit]
  ex.
  1) git log
     commit 919f085276696c26a818a50c8d5652fb16625e28
     commit 1b5228ee490ea9986575c0cc51e644d8204f91c8
     commit eb62c7b27edbaf54502c80fd0ae4e040117c87ef 
  2) git rebase -i eb62c7b27edbaf54502c80fd0ae4e040117c87ef
     this will re-commit 919f0852 and 1b5228ee in an interactive mode

# git stash: saved working directory and index state
  used to switch between branches without commiting the changes
  1) git stash list             : list all stashed states 
     ex.
       stash@{0}: WIP on master : 049d078 added the index file (the most recent stash)
       stash@{1}: WIP on master : c264051 Revert "added file_size"
  2) git stash apply: restore to the most-recent stashed state
     git stash apply stash@{2}  : restore to the specified stashed state
  3) git stash drop stash@{0}   : drop the specified stashed state
  4) git stash show -p stash@{2}: show git diff against a specific stash
     git stash show -p          : show git diff against the most recent stash

# Webhooks
  whenever some event is triggered, GitHub sends a HTTP POST payload to the configured URL
  1) Webhooks allow you set up GitHub Apps which subscribe to certain events on GitHub.com
     ex. a PR event triggers a CI build
  2) Each webhook can be configured to an organization or a specific repository
  Github Events:
  1) pull_request: a pull request is assigned, unassigned, opened, closed, etc. 
  2) issues: an Issue is assigned, opened, closed, etc. 
  3) pull_request_review: a pull request review is submitted, edited, or dismissed

# git config
1) config file:
   edit .git/config file:
     [remote "origin"]   # remote repo (personal project)
        url = https://github.com/starmap0312/storm.git
        fetch = +refs/heads/*:refs/remotes/origin/*
     [remote "upstream"] # remote repo (upstream project)
        url = https://github.com/apache/storm.git
        fetch = +refs/heads/*:refs/remotes/upstream/*
     [branch "master"]   # set local branch master associated with remote origin master
        remote = origin
        merge = refs/heads/master
2) command:
   git config name value: replace one line matching the key
     i.e. git config --replace-all name value
   git config --add name value: add a new line to the option without altering any existing values
     ex.
     git config remote.origin.url https://github.com/starmap0312/storm.git
     git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/*
   git branch.<name>.remote [remote_repo]:
     when on branch [name], it tells git fetch and git push which [remote_repo] to fetch from/push to
     ex. git config branch.master.remote origin
   git branch.<name>.merge [refspec]: define the upstream branch for the given branch
     it tells git fetch, git pull, git rebase which branch to merge and can also affect git push
     when on branch [name], it tells git fetch the default refspec to be marked for merging in FETCH_HEAD
     ex. git config branch.master.merge refs/heads/master

# git rev-list
  git rev-list [commit]: lists commit objects in reverse chronological order, starting from [commit]
  ex. 
    git log
     commit 919f085276696c26a818a50c8d5652fb16625e28
     commit 1b5228ee490ea9986575c0cc51e644d8204f91c8
     commit eb62c7b27edbaf54502c80fd0ae4e040117c87ef 
     ...
    git rev-list 1b5228ee490ea9986575c0cc51e644d8204f91c8
     commit 1b5228ee490ea9986575c0cc51e644d8204f91c8
     commit eb62c7b27edbaf54502c80fd0ae4e040117c87ef
     ...
  git rev-list [currentBranch]..[trackingRemote]/[trackingBranch]
  ex.
    git rev-list master..upstream/master
    9ab3f9edb37c7b5c0cc1479424719aa330381e83 (upstream/master)
    ...
    f40f9468ceb7d6fac5687a1f6fed9522e3aacb1a
    a0765b5f9bdcefcd9eb95d436bb5c24455a54458 (HEAD -> master, only show the above, not shown here)

# alias
  1) edit ~/.gitconfig to add git command shortcuts for each individual repo
     [alias]
     st = status
     ci = commit
     co = checkout
     br = branch
     unstage = reset HEAD --
     last = log -1 HEAD
  2) edit ~/.profile to add system shortcuts
     alias gst='git status'
     alias gl='git pull'
     alias gp='git push'
     alias gd='git diff | mate'
     alias gau='git add --update'
     alias gc='git commit -v'
     alias gca='git commit -v -a'
     alias gb='git branch'
     alias gba='git branch -a'
     alias gco='git checkout'
     alias gcob='git checkout -b'
     alias gcot='git checkout -t'
     alias gcotb='git checkout --track -b'
     alias glog='git log'
     alias glogp='git log --pretty=format:"%h %s" --graph'
