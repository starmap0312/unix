# install
  sudo yum install docker

# Push an image or a repository to a Docker Registry
  sudo docker push [ip]:[port]/[repo_name]

# Pull an image or a repository from a Docker Registry
  sudo docker pull [ip]:[port]/[repo_name]
  ex. docker pull xxx.yahoo.com:4443/xxx/yyy:latest

# remove/delete docker image
  docker rmi <imageid>
  docker rmi -f <imageid> # force remove image that has dependent child images
  docker system df
  docker image prune -a # remove all images without at least one container associated to them (clean up the disk space)
  docker container prune # remove all stopped containers (clean up the disk space)
    ex. docker images -a | grep "<pattern>" | awk '{print $3}' | xargs docker rmi # grep images with <pattern> and delete them all together
  docker system prune # remove all images, containers, networks, volumes not used

# list local docker images
  docker images

# list local docker volumes 
  docker volume ls
  docker volume prune: remove all unused local volumes
 
# list all container, remove container
  docker container ls -a
  docker rm CONTAINER_ID
  docker stop CONTAINER_ID
  docker run -v /var/run/docker.sock:/var/run/docker.sock assaflavie/runlike [AN-EXISTING-RUNNING-CONTAINER]
    # in order to run a similar container from a new image, you can run the above command to get the exact command of running AN-EXISTING-RUNNING-CONTAINER

# run bash in a container 
  1) run bash in a new container
     docker run -it [IMAGE_ID] /bin/bash
       -it: initiate a bash terminal, allowing interactive mode
       ex. docker run -it ubuntu:14.04 /bin/bash
       ex. docker run -it --entrypoint="/bin/bash" ubuntu:14.04
  2) run bash in a existing, running container
     docker exec -it [CONTAINER_ID] /bin/bash
       ex. docker exec -it 4a523634665a /bin/bash

# fetch the logs of a container
  docker logs CONTAINER_ID
  ex. docker logs 015da0821bf1

# docker save & docker load
  docker save -o [filename] example.com:443/org_name/image_name
    # this saves the image to a local image file
  docker load i [filename] # load docker image from local file 
    # this loads the local image file to the REPOSITORY, ex.
    # REPOSITORY                                                 TAG                 IMAGE ID            CREATED             SIZE
    # example.com:443/org_name/image_name 1.0.0               35b6f5234ffe        11 minutes ago      510 MB
  docker load < [filename] # load docker image from STDIN
  docker run --name=[container_name] --hostname=[local_hostname] --network=host --expose=4080/tcp --restart=always --detach=true --volume=/tmp:/tmp example.com:443/org_name/image_name:1.0.0
    # run an image of REPOSITORY by giving it a [container_name], under a [local_hostname], mouted with [/tmp:/tmp] folders

# remove all unused or dangling (not related to any tagged images) images
  docker system prune

# docker run
  1) Docker runs processes in isolated containers 
  2) A container is a process which runs on a host (local/remote). 
     when execute docker run, the container process that runs is isolated in that 
     it has its own file system, its own networking, and its own isolated process 
     tree separate from the host.
  3) use the docker run command to define the container's resources at runtime

  General form
    $ docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]
      ex. docker run --rm -v `pwd`/logs --net=host [image]:[tag] echo hello
    (must specify an IMAGE to derive the container from)
    ([OPTIONS] override the image defaults)

  options:
    -i: keep stdin open even if not attached
    -t: allocate a pseudo-tty
    -v, --volume=/tmp:/tmp: shared file system
      ex. docker run -v "/tmp:/tmp" [image]:[tag]
      ex. docker run -it -v `pwd`:/app -p 8080:80 --entrypoint='/bin/bash' [REMOTE_IMAGE] --login (mount `pwd` to path /app inside docker container)
          (this binds port 8080 of the container to TCP port 80 on 127.0.0.1 of the host machine)
    -p: publish a container's port (or a range of ports) to the host
      ex. docker run -p 8080:80 ...
    --entrypoint: default command to execute at runtime
      ex. docker run --entrypoint='/bin/bash' [image] # this overrides the entrypoint to execute shell instead (useful when a docker runs like an executable, this lets you execute its shell instead)
    --env VAR_NAME=value: set environment variable with value
    --login: register or login to a Docker Registry (i.e. Docker Hub)
      require user to use sudo or be root
    --network="bridge"/"host": set network mode for the container
      'bridge': create a network stack on the default Docker bridge (use private ip)
      'host': use the Docker host network stack                     (use public ip)
              Note: the host mode gives the container full access to local system services such as D-bus and is therefore considered insecure
      ex. docker run --network=host [image]:[tag]
    --name=[name]: assign a name to the container
      you can use it when referencing the container, ex. you can then stop the container by running "docker stop webserver"
      ex. docker run --detach --publish=8080:80 --name=webserver nginx
          docker stop webserver
    -h, --hostname `hostname`: set the container host name (default container ID, ex. cf9b0cc060ad)
      you can use this to override the hostname, but it only resolve with the internal docker DNS, not outside of the container
    --restart=always: restart policy to apply when a container exits (default "no")
      ex. docker run --network=host --restart=always [image]:[tag]

# List containers
  docker ps
    -a, --all: show all containers (default shows just running)
    ex. docker ps -a
      list all the containers, including running and exited containers

# Restart a running container
  docker restart [container id]

# Attach to a running container
  docker attach [container_name]

# detach from the container
  Ctrl-p + Ctrl-q

# docker exec: run a command in a running (existing) container
options:
  -i, --interactive: keep STDIN open even if not attached
  -t: --tty: allocate a pseudo-TTY
  ex. docker run -it 665b4a1e17b6 /bin/bash
      docker run -p 9999:9999/tcp -it [image-name] /bin/bash # run bash in a container

# run docker command as normal user (not root)
sudo groupadd docker
sudo gpasswd -a ${USER} docker
sudo service docker restart
(re-login the machine to take effect)

# Build an image from a Dockerfile
  Usage: docker build [OPTIONS] PATH | URL
    ex. edit Dockerfile, and then run docker build:
          FROM node:latest # pull base image: [ip]:[port]/[repo_name]
          RUN echo hello
        docker build -t [image_name] . --no-cache
  options:
    -t, --tag: Name and optionally a tag in the 'name:tag' format (default [])

# Dockerfile commands
1) RUN: execute command(s) in a new layer and creates a new image (ex. installing software packages)
        use RUN instructions to build your image by adding layers on top of initial image
   ex. RUN apt-get update
       RUN apt-get install -y libgomp1
2) CMD: set default command and parameters, which can be overwritten from command line when docker container runs
   usage:
     CMD command param1 param2              # shell form
     CMD ["executable", "param1", "param2"] # exec form, preferred over shell form
     CMD ["param1","param2"]                # specify default parameters to ENTRYPOINT
   ex1. CMD echo "Hello world"
   ex2. CMD ["/bin/echo", "Hello world"] # preferred
3) ENTRYPOINT: configure a container that will run as an executable (Docker has a default entrypoint: /bin/sh -c)
               so you could run the container just like an executable, ex.docker run -it [image] echo "this is a test"
               ex. when you run docker as: "docker run -i -t ubuntu bash", the entrypoint is the default /bin/sh -c and the command is bash  
                  ("/bin/sh -c bash" will get executed under the image ubuntu in the container)
               ex. docker run -it [image] "parameters for the container" # run container like an executable that take parameters
               ex. ENTRYPOINT ["/bin/cat"] # Dockerfile
                   docker run -it [image] "/etc/fstab" # i.e. "/bin/cat /etc/fstab" gets excuted when the container is run
                   
   usage:
     ENTRYPOINT command param1 param2  # shell form
     ENTRYPOINT ["executable", "param1", "param2"] # exec form, preferred
   difference with CMD:
     ENTRYPOINT command and parameters are not ignored when Docker container runs with command line parameters
     prefer ENTRYPOINT to CMD when building executable
     use CMD if you need to provide extra default arguments that could be overwritten from command line when docker container runs
   ex1. ENV name John
        ENTRYPOINT echo "Hello, $name"
        (when container runs as docker run -it <image> will produce output: Hello, John)  # normal shell processing happens
   ex2. ENV name John
        ENTRYPOINT ["/bin/echo", "Hello, $name"] # preferred, but here name is not substituted
        (when container runs as docker run -it <image> will produce output: Hello, $name) # normal shell processing DOES NOT happen
   ex3. ENV name John
        ENTRYPOINT ["/bin/bash", "-c", "echo Hello, $name"]
        (when container runs as docker run -it <image> will produce output: Hello, John)  # run bash 

# Run Docker container
  docker run -p 8080:80 [image_name]
    ex. docker run -p 8080:80 [image_name] # publish port 8080 for the service (this binds port host machine port 80 to container port 80)
  options:
     -p, --publish: Publish a container's port(s) to the host (default [])
       ex. docker run -p 127.0.0.1:8080:80/tcp ubuntu bash
           this binds host machine on 127.0.0.1 port 8080 to container TCP port 80
  note: to stop the running container, execute
     docker ps
     docker stop b5f07b1fa1f7

# Run Docker shell
  docker run -it [image] bash
  docker run --entrypoint='/bin/bash' -it [image] # override entrypoint to bash

# Run a command in a container
  docker run --detach --name [container_name] [image]
    ex. docker run --detach --name myapp ubuntu
  docker exec [container_name] bash -c 'echo "hello"'
    ex. docker exec myapp bash -c 'echo "hello"'

# remove all unused or dangling (not related to any tagged images) images
  docker system prune

# docker run
  1) Docker runs processes in isolated containers 
  2) A container is a process which runs on a host (local/remote). 
     when execute docker run, the container process that runs is isolated in that 
     it has its own file system, its own networking, and its own isolated process 
     tree separate from the host.
  3) use the docker run command to define the container's resources at runtime

  General form
    $ docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]
      ex. docker run --rm -v `pwd`/logs --net=host [image]:[tag] echo hello
    (must specify an IMAGE to derive the container from)
    ([OPTIONS] override the image defaults)

  options:
    -t: allocate a pseudo-tty
    -i: keep stdin open even if not attached
      ex. sudo docker run -t -i ubuntu:14.04 /bin/bash
      (initiate a bash terminal, allowing interactive mode)
    -v, --volume=/tmp:/tmp: shared file system
      ex. docker run -v "/tmp:/tmp" [image]:[tag]
      ex. docker run -it -v `pwd`:/app -p 8080:80 --entrypoint='/bin/bash' [REMOTE_IMAGE] --login (mount `pwd` to path /app inside docker container)
          (this binds port 8080 of the container to TCP port 80 on 127.0.0.1 of the host machine)
    -p: publish a container's port (or a range of ports) to the host
      ex. docker run -p 8080:80 ...
    --entrypoint: default command to execute at runtime
      ex. docker run -it --entrypoint='/bin/bash' [image] # this overrides the entrypoint to execute shell instead (useful when a docker runs like an executable, this lets you execute its shell instead)
    --env VAR_NAME=value: set environment variable with value
    --login: register or login to a Docker Registry (i.e. Docker Hub)
      require user to use sudo or be root
    --network="bridge"/"host": set network mode for the container
      'bridge': create a network stack on the default Docker bridge (use private ip)
      'host': use the Docker host network stack                     (use public ip)
              Note: the host mode gives the container full access to local system services such as D-bus and is therefore considered insecure
      ex. docker run --network=host [image]:[tag]
    --name=[name]: assign a name to the container
      you can use it when referencing the container, ex. you can then stop the container by running "docker stop webserver"
      ex. docker run --detach --publish=8080:80 --name=webserver nginx
          docker stop webserver
    -h, --hostname `hostname`: set the container host name (default container ID, ex. cf9b0cc060ad)
      you can use this to override the hostname, but it only resolve with the internal docker DNS, not outside of the container
    --restart=always: restart policy to apply when a container exits (default "no")
      ex. docker run --network=host --restart=always [image]:[tag]

# docker run: some commonly used options 
 1) -d, --detach: run container in background and print container ID
    as it runs in the background, you cannot CTRL-C to exit the container
      instead, you need to manually run "docker stop [CONTAINER_ID]" to stop the container
    ex. docker run --detach --publish=8080:80 --name=webserver nginx
        docker stop webserver
 2) --rm: automatically remove the container when it exits
    without --rm, the container (an instance of the image) still exists in the machine, which occupies the disk space, and
      you will need to manually run "docker rm [CONTAINER_ID]" to remove it from the disk
    ex. docker run --network=host --rm [image]:[tag]
 3) -it: keep stdin open even if not attached & allocate a pseudo-tty
    this creates an interactive bash shell in the container
    i.e. it instructs Docker to allocate a pseudo-TTY connected to the container’s stdin, creating an interactive bash shell in the container
    ex. docker run -it ubuntu:14.04 /bin/bash 
        $ exit 13 # you are inside a container, with an interactive bash shell, and then you exit the container with code 13
        $ echo $? # you are outside of the container and are passed on the exit code 13
          13
        $ docker ps -a | grep test
          d6c0fe130dba        debian:7            "/bin/bash"  
    the bash shell is quit by entering exit 13. This exit code is passed on to the caller of docker run, and is recorded in the test container’s metadata.

# List containers
  docker ps
    -a, --all: show all containers (default shows just running)
    ex. docker ps -a
      list all the containers, including running and exited containers

# Restart a running container
  docker restart [container id]

# Attach to a running container
  docker attach [container_name]

# detach from the container
  Ctrl-p + Ctrl-q

# docker exec: run a command in a running (existing) container
options:
  -i, --interactive: keep STDIN open even if not attached
  -t: --tty: allocate a pseudo-TTY
  ex. docker run -it 665b4a1e17b6 /bin/bash
      docker run -p 9999:9999/tcp -it [image-name] /bin/bash # run bash in a container

# run docker command as normal user (not root)
sudo groupadd docker
sudo gpasswd -a ${USER} docker
sudo service docker restart
(re-login the machine to take effect)

# docker save & docker load
  docker save -o filename.tar example.com:443/org/appname
  docker load < filename.tar # load docker image from STDIN

# Build an image from a Dockerfile
  Usage: docker build [OPTIONS] PATH | URL
    ex. edit Dockerfile, and then run docker build:
          FROM node:latest # pull base image: [ip]:[port]/[repo_name]
          RUN echo hello
        docker build -t [image_name] . --no-cache
  options:
    -t, --tag: Name and optionally a tag in the 'name:tag' format (default [])

# Run Docker container
  docker run -p 8080:80 [image_name]
    ex. docker run -p 8080:80 [image_name] # publish port 8080 for the service (this binds port host machine port 80 to container port 80)
  options:
     -p, --publish: Publish a container's port(s) to the host (default [])
       ex. docker run -p 127.0.0.1:8080:80/tcp ubuntu bash
           this binds host machine on 127.0.0.1 port 8080 to container TCP port 80
  note: to stop the running container, execute
     docker ps
     docker stop b5f07b1fa1f7

# Build a docker image by Docerfile and run it with a tag name
  docker build -f Dockerfile -t [TAG_NAME] .
    -t, --tag: Name and optionally a tag in the 'name:tag' format (default [])
  docker run --rm -it --env BROKER=$1 [TAG_NAME]
    --env VAR_NAME=value: set environment variable with value
  ex.
    docke build -f Dockerfile -t my-test-app .
    docke run --rm -it --env MY_VAR=1 [TAG_NAME]

# Dockerfile commands
1) RUN: execute command(s) in a new layer and creates a new image (ex. installing software packages)
        use RUN instructions to build your image by adding layers on top of initial image
   ex. RUN apt-get update
       RUN apt-get install -y libgomp1
2) CMD: set default command and parameters, which can be overwritten from command line when docker container runs
   usage:
     CMD command param1 param2              # shell form
     CMD ["executable", "param1", "param2"] # exec form, preferred over shell form
     CMD ["param1","param2"]                # specify default parameters to ENTRYPOINT
   ex1. CMD echo "Hello world"
   ex2. CMD ["/bin/echo", "Hello world"] # preferred
3) ENTRYPOINT: configure a container that will run as an executable (Docker has a default entrypoint: /bin/sh -c)
               so you could run the container just like an executable, ex.docker run -it [image] echo "this is a test"
               ex. when you run docker as: "docker run -i -t ubuntu bash", the entrypoint is the default /bin/sh -c and the command is bash  
                  ("/bin/sh -c bash" will get executed under the image ubuntu in the container)
               ex. docker run -it [image] "parameters for the container" # run container like an executable that take parameters
               ex. ENTRYPOINT ["/bin/cat"] # Dockerfile
                   docker run -it [image] "/etc/fstab" # i.e. "/bin/cat /etc/fstab" gets excuted when the container is run
                   
   usage:
     ENTRYPOINT command param1 param2  # shell form
     ENTRYPOINT ["executable", "param1", "param2"] # exec form, preferred
   difference with CMD:
     ENTRYPOINT command and parameters are not ignored when Docker container runs with command line parameters
     prefer ENTRYPOINT to CMD when building executable
     use CMD if you need to provide extra default arguments that could be overwritten from command line when docker container runs
   ex1. ENV name John
        ENTRYPOINT echo "Hello, $name"
        (when container runs as docker run -it <image> will produce output: Hello, John)  # normal shell processing happens
   ex2. ENV name John
        ENTRYPOINT ["/bin/echo", "Hello, $name"] # preferred, but here name is not substituted
        (when container runs as docker run -it <image> will produce output: Hello, $name) # normal shell processing DOES NOT happen
   ex3. ENV name John
        ENTRYPOINT ["/bin/bash", "-c", "echo Hello, $name"]
        (when container runs as docker run -it <image> will produce output: Hello, John)  # run bash 

# Run the shell in a new container created 
  docker run -it [image] /bin/bash
  docker run --entrypoint='/bin/bash' -it [image] # override the entrypoint of the image to /bin/bash

# Run the shell in a running container 
  docker exec -it [CONTAINER_ID] /bin/bash

# docker run vs. docker exec
  docker run: start up a new container and run a process within that new container
    ex. docker run --name ubuntu_bash --rm -i -t ubuntu bash # start a new container named ubuntu_bash and start a Bash session
  docker exec: execute a command in a container is already running
    ex. docker exec -d ubuntu_bash touch /tmp/execWorks # create a new file /tmp/execWorks inside the running container ubuntu_bash, in the background
        docker exec -it ubuntu_bash bash # execute an interactive bash shell on the running container named ubuntu_bash

# Find out the command of a running container
  docker pull docker.io/assaflavie/runlike
  docker run --rm -v /var/run/docker.sock:/var/run/docker.sock assaflavie/runlike [CONTAINER_ID]

# connecting to container service port
 docker containers can connect to the outside world without any configuration; however, the outside world cannot connect to a Docker container by default
 1) you will need to export the docker container ports
 ex. expose all ports:
     docker run -P -d nginx
 ex. expose a specific port:
     docker run -p 80:80 -d nginx

 2) in Linux, you could use host networking so that the container shares the host networking namespace
 i.e. if you run a container which binds to port 80 and use host networking, the container application is available on port 80 on the host IP address
 # note this networking mode is NOT supported in Mac, you will have to go with option 1) 
 ex. use host networking
     docker run --network=host -d nginx

# some useful commands
  1) remove all containers in the disk
     docker rm -f $(docker ps -aq): remove all containers in the disk

# docker-compose commands
  1) docker-compose build
     if you change a service’s Dockerfile or the contents of its build directory, run docker-compose build to rebuild it
  2) docker-compose run [service_name]
     runs a one-time command against a service
     ex. docker-compose run web bash
     ex. docker-compose run --service-ports web bash
         create the service’s ports that are mapped to the host
  3) docker-compose up
     builds, (re)creates, starts, and attaches to containers for a service
     ex. docker-compose up --detach
         start the containers in the background and leaves them running
     ex. docker-compose up --force-recreate
         stop and recreate all containers

# dockerfile with multi-stage builds
ex. Dockerfile

    FROM golang:1.16 AS builder # builder image
    WORKDIR /go/src/github.com/alexellis/href-counter/
    RUN go get -d -v golang.org/x/net/html  
    COPY app.go ./
    RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app . # this generates a file app in the WORKDIR

    FROM alpine:latest # prod image 
    RUN apk --no-cache add ca-certificates
    WORKDIR /root/
    COPY --from=builder /go/src/github.com/alexellis/href-counter/app ./ # with option --from=builder, you can copy files in the builder image to this prod image
    CMD ["./app"]  

    # build the prod image without creating the intermediate builder image
    $ docker build -t alexellis2/href-counter:latest .

# the Docker Container Logs are Stored:
  /var/lib/docker/containers/<container_id>/<container_id>-json.log
