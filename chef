# Chef resource
  1) one part of the system, ex. a file, a template, or a package
  2) a part of the system and its desired state, ex. a package that should be installed, a service that
     should be running, or a file that should be generated
  3) every resource in Chef has a default action
     file resource has a default action ":create"  (create a file)
     ex.

     file 'motd' do
       content 'hello world'
     end


     file 'motd' do
       action :create
       content 'hello world'
     end

     other actions: install a package, and start a service
  4) resource attributes: can be ordered arbitrary
     ex.
       file '/etc/motd' do
         owner 'root'          <== resource attribute can be put in front of action
         group 'root'
         mode '0755'
         action :create
       end

# Chef recipe: recipes organize resources
  1) a file that groups related resources, ex. everything needed to configure a web server, database server, or
     a load balancer
  2) a collection of resources that describes a particular configuration or policy
     i.e. it describes everything that is required to configure part of a system
          install and configure software components
          manage files
          deploy applications
     ex.
       package 'httpd'                <== default action for package resource is install

       service 'httpd' do             <== specify the action for service resource to be enable, start
         action [:enable, :start]         i.e. enables the service when the system boots, then starts it
       end

       file '/var/www/html/index.html' do  <== create a file resource of webpage
         content '<html>
         <body>
             <h1>hello world</h1>
         </body>
       </html>'
       end

  2) command to run a single recipe (local mode)
     ex.
       chef-client --local-mode filename.rb
       
  3) Chef applies resources in the order they appea

# Chef cookbook: make your recipe more manageable
  provides structure to your recipes and enables you to more easily reference external files
    i.e. a cookbook helps you stay organized.

# recipe vs. cookbook
  recipe: a collection of resources, and typically configures a software package or a piece of infrastructure
  cookbook: groups together recipes in a way that is more manageable than having just recipes alone
  ex.
    a recipe starts the configuration policy of a web site
    a template resource for the HTML home page from a external file
    a cookbook to package both parts up into a single unit for later deployment

# chef generate cookbook: command to create a cookbook
  chef generate cookbook /path/to/cookbooks/<cookbook_name>
    ex.
      chef generate cookbook cookbooks/learn_chef_httpd

# chef-client --runlist: command to run a cookbook
  sudo chef-client --local-mode --runlist 'recipe[<cookbook_name>]'
    --runlist: specifies each of the individual recipes from your cookbook that you want to apply
               can contain multiple recipes from multiple cookbooks
    --local-mode: run in the local mode
  ex. 
    sudo chef-client --local-mode --runlist 'recipe[learn_chef_httpd]'
    (recipe[learn_chef_httpd] == recipe[learn_chef_httpd::default])

# run-list: let you specify which recipes to run, and the order in which to run them
  run-list is important when there are multiple cookbooks (the order in which they run)

# chef generate template: command create a template
  chef generate template cookbooks/<cookbook_name> <filename>
  ex.
    chef generate template cookbooks/learn_chef_httpd index.html

# knife: a command tool to communicate with the Chef server from the workstation
  1) enables you to upload cookbooks to Chef server and work with nodes
  2) requires two files to communicate with Chef server: an RSA private key and a configuration file
     every request to Chef server is authenticated through an RSA public key-pair
     configuration file (knife.rb): contains information, ex. Chef server's URL, location of RSA private key, and
     the default location of cookbooks (located in a directory named .chef, similar to .git)

# knife ssl check: validate connection to Chef server
  need knife.rb file and private key file, ex. <username>.pem in .chef/ folder
    generate and download both knife.rb and <username>.pem from Chef server
    put the two files to folder: /path/to/<cookbook_name>/.chef/
  ex.
    $ knife ssl check
      Connecting to host api.chef.io:443
      Successfully verified certificates from `api.chef.io'

# knife.rb: configuration details for knife
  1) loaded every time this executable is run
  2) not created by default
  3) default location: ~/<chef-repo>/.chef/knife.rb
  4) settings:
     client_key       "/etc/chef/client.pem"     (default)
       location of client key (or put in chef repo folder: ~/<chef-repo>/.chef/<username>.pem)
     chef_server_url  "https://api.chef.io/organizations/<org_name>"
       URL for the Chef server
     validation_key   "/etc/chef/validation.pem" (default)
       location of validation key, used when chef-client is registered with Chef server

# knife cookbook site download: command to download cookbook from Chef serve
  knife cookbook site download <cookbook_name>
    download cookbook from Chef server or public chef supermarket (https://supermarket.chef.io)

# knife cookbook upload: upload cookbook to Chef server
  knife cookbook upload <cookbook_name>

# knife cookbook list: command to list cookbook on chef server
  ex.
    $ knife cookbook list
      learn_chef_httpd   0.2.0

# knife bootstrap: command to boostrap a node using knife
  bootstrap: a process that installs chef-client on a node so that it can communicate with Chef server
    i.e. downloads and installs chef-client
         registers itself with the Chef server
         does an initial checkin
         applies any cookbooks that are part of its run-list
         an RSA private key is generated on node to enable the node to make API calls to Chef server
           (default location: /etc/chef/client.pem, need to be removed if want to bootstrap the second time)
  1) boostrap using username/password
     knife bootstrap <ip> --ssh-user <username> --ssh-password '<password>' --sudo --use-sudo-password \
       --node-name node1 --run-list 'recipe[<cookbook_name>]'
  2) boostrap using key-based authentication
     knife bootstrap <ip> --ssh-user <username> --sudo --identity-file <id_rsa> \
       --node-name <node_name> --run-list 'recipe[<cookbook_name>]'

# knife node list: list all successfully bootstrapped nodes
  ex. knife node list
      node1

# knife node show: view node data
  ex. knife node show node1
      Node Name:   node1
      Environment: _default

# knife ssh: update node's configuration when cookbook changes
  bootstrapping is a one-time process
  after that, run knife ssh to update node's configuration when cookbook changes
  1) update node using username and password
     knife ssh <ip> 'sudo chef-client' --manual-list --ssh-user <username> --ssh-password '<password>'
  2) update node using key-based authentication
     knife ssh <ip> 'sudo chef-client' --manual-list --ssh-user <username> --identity-file <id_rsa>
  ex.
    edit cookbook files
    knife cookbook upload learn_chef_httpd
    knife ssh <ip> 'sudo chef-client' --manual-list --ssh-user <username> --identity-file <id_rsa>

# knife node delete & knife client delete: delete the node from Chef server
  ex.
    $ knife node delete node1 --yes
      Deleted node[node1]
    $ knife client delete node1 --yes
      Deleted client[node1]node1 --yes

