# install chef
  1) install chefdk:
     sudo rpm -i https://packages.chef.io/files/stable/chefdk/2.5.3/el/7/chefdk-2.5.3-1.el7.x86_64.rpm
  2) shell-init: initialize your shell to use ChefDK as your primary ruby
     eval "$(chef shell-init bash)"
     note: copy the above line into ~/.bash_profile to avoid prepending all commands with chef exec

# Chef terminology
# I) Chef resource
  1) one part of the system, ex. a file, a template, or a package
  2) a part of the system and its desired state
     ex. a file that should be generated
         a package that should be installed
         a service that should be running
  3) every resource in Chef has a default action
     ex. file resource has a default action ":create"  (create a file)

     file 'motd' do
       content 'hello world'
     end


     file 'motd' do
       action :create
       content 'hello world'
     end

     ex. other actions: install a package, and start a service
  4) resource attributes: can be ordered arbitrary
     ex.
       file '/etc/motd' do
         owner 'root'          <== resource attribute can be put in front of action
         group 'root'
         mode '0755'
         action :create
       end
  5) use the execute resource to execute a single command 
     ex. a single command that is run by itself
       execute 'log_folder' do
         command 'mkdir -p /tmp/log'
       end

# II) Chef Recipe: recipes organize resources
  1) a file that groups related resources
     ex. everything needed to configure a web server, database server, or a load balancer
  2) a collection of resources that describes a particular configuration or policy
     i.e. it describes everything that is required to configure part of a system
     ex. install and configure software components
         manage files
         deploy applications
     ex.
       package 'httpd'                <== default action for package resource is install

       service 'httpd' do             <== specify the action for service resource to be enable, start
         action [:enable, :start]         i.e. enables the service when the system boots, then starts it
       end

       file '/var/www/html/index.html' do  <== create a file resource of webpage
         content '<html>
         <body>
             <h1>hello world</h1>
         </body>
       </html>'
       end

  2) command to run a single recipe (local mode)
     ex.
       chef-client --local-mode filename.rb
       
  3) Chef applies resources of a recipe in the order they appear

# III) Chef Cookbook: make your recipe more manageable
  the fundamental unit of configuration and policy distribution, and it defines:
    i)  recipes/:
        recipes specify the resources to use and the order in which they are to be applied
    ii) attributes/:
        an attribute value is a specific detail about a node, used by Chef Infra Client to understand:
          a) current state of the node
          b) what state the node was (previous run)
          c) what state the node should be (after current run)
        it can be defined in a cookbook (or a recipe) and then used to override the default settings on a node
        attribute type:
          default:
            this automatically resets at the start of every run 
            it has the lowest attribute precedence
            use the default type as often as possible in cookbook
   iii) files/:
        it stores files that are used in cookbook with the cookbook_file resource
        use the cookbook_file resource defined in recipe
        ex.
          cookbook_file '/tmp/config.yaml' do # /tmp/config.yaml is path that the file to be created
            source 'config.yaml' # this specifies the file that lies in cookbook's files/default folder
          end
        you can then define command to access the file in recipe
          execute 'cat-config' do
            command 'cat config.yaml'
            cwd '/tmp'
          end

  it provides structure to your recipes and enables you to more easily reference external files
    i.e. a cookbook helps you stay organized

# IV) Chef Run-list
  let you specify which recipes to run, and the order in which to run them
  important when there are multiple cookbooks (the order in which they run)
  1) an ordered list of roles and/or recipes that are run in the exact order defined in the run-list
     if a recipe appears more than once in the run-list, the chef-client will not run it twice
  2) always specific to the node on which it runs
     nodes may have a run-list that is identical to the run-list used by other nodes
  3) stored as part of the node object on the Chef server
  4) maintained using knife, and then uploaded from the workstation to the Chef server, or is maintained using
     the Chef management console

# V) Chef Attribute
  1) a specific detail about a node
  2) used by the chef-client to understand:
     the current state of the node
     what the state of the node was at the end of the previous chef-client run
     what the state of the node should be at the end of the current chef-client run
  3) defined by:
     the state of the node itself
     cookbooks (in attribute files and/or recipes)
     roles
     environments

# VI) Chef Role
  1) a way to define certain patterns and processes that exist across nodes in organization (same job function)
  2) each role consists of zero (or more) attributes and a run-list
  3) when a chef-client runs, it merges its own attributes and run-lists with those contained within each
     assigned role
  4) when a role is run against a node, the configuration details of that node are compared against the
     attributes of the role, and then the contents of that role’s run-list are applied to the node’s
     configuration details
  5) each node can have zero (or more) roles assigned to it

# VII) Chef Environment
  1) a way to map an organization’s real-life workflow to what can be configured and managed when using
     Chef server
  2) every organization begins with a single environment called the _default environment, which cannot be
     modified (or deleted)
  3) additional environments can be created to reflect each organization’s patterns and workflow
     ex. creating production, staging, testing, and development environments
  4) an environment is also associated with one (or more) cookbook versions

# VIII) Chef Policy
  1) policy maps business and operational requirements, process, and workflow to settings and objects 
     stored on the Chef server

# Chef Comparison
# Role vs. Environment vs. Policy
  1) roles define server types, such as web server or database server
  2) environments define process, such as dev, staging, or production
  3) cookbooks (and cookbook versions) in which organization-specific configuration policies are maintained

# Recipe vs. Cookbook
  recipe: a collection of resources, and typically configures a software package or a piece of infrastructure
  cookbook: groups together recipes in a way that is more manageable than having just recipes alone
  ex.
    a recipe starts the configuration policy of a web site
    a template resource for the HTML home page from a external file
    a cookbook to package both parts up into a single unit for later deployment

# Sensitive data
  certain types of data-passwords, user account data, and other sensitive items—can be placed in data bags,
    which are located in a secure sub-area on the Chef server that can only be accessed by nodes that
    authenticate to the Chef server with the correct SSL certificates

# Chef Command
# chef generate cookbook: command to create a cookbook
  chef generate cookbook /path/to/cookbooks/<cookbook_name>
    ex.
      chef generate cookbook cookbooks/learn_chef_httpd

# chef-client --runlist: command to run a cookbook
  sudo chef-client --local-mode --runlist 'recipe[<cookbook_name>]'
    --runlist: specifies each of the individual recipes from your cookbook that you want to apply
               can contain multiple recipes from multiple cookbooks
    --local-mode: run in the local mode
  ex. 
    sudo chef-client --local-mode --runlist 'recipe[learn_chef_httpd]'
    (recipe[learn_chef_httpd] == recipe[learn_chef_httpd::default])

# chef generate template: command create a template
  chef generate template cookbooks/<cookbook_name> <filename>
  ex.
    chef generate template cookbooks/learn_chef_httpd index.html

# knife: a command tool to communicate with the Chef server from the workstation
  1) enables you to upload cookbooks to Chef server and work with nodes
  2) requires two files to communicate with Chef server: an RSA private key and a configuration file
     every request to Chef server is authenticated through an RSA public key-pair
     configuration file (knife.rb): contains information, ex. Chef server's URL, location of RSA private key, and
     the default location of cookbooks (located in a directory named .chef, similar to .git)

# knife ssl check: validate connection to Chef server
  need knife.rb file and private key file, ex. <username>.pem in .chef/ folder
    generate and download both knife.rb and <username>.pem from Chef server
    put the two files to folder: /path/to/<cookbook_name>/.chef/
  ex.
    $ knife ssl check
      Connecting to host api.chef.io:443
      Successfully verified certificates from `api.chef.io'

# knife.rb: configuration details for knife
  1) loaded every time this executable is run
  2) not created by default
  3) default location: ~/<chef-repo>/.chef/knife.rb
  4) settings:
     client_key       "/etc/chef/client.pem"     (default)
       location of client key (or put in chef repo folder: ~/<chef-repo>/.chef/<username>.pem)
     chef_server_url  "https://api.chef.io/organizations/<org_name>"
       URL for the Chef server
     validation_key   "/etc/chef/validation.pem" (default)
       location of validation key, used when chef-client is registered with Chef server

# knife cookbook site download: command to download cookbook from Chef serve
  knife cookbook site download <cookbook_name>
    download cookbook from Chef server or public chef supermarket (https://supermarket.chef.io)

# knife cookbook upload: upload cookbook to Chef server
  knife cookbook upload <cookbook_name>

# knife cookbook list: command to list cookbook on chef server
  ex.
    $ knife cookbook list
      learn_chef_httpd   0.2.0

# knife bootstrap: command to boostrap a node using knife
  bootstrap: a process that installs chef-client on a node so that it can communicate with Chef server
    i.e. downloads and installs chef-client
         registers itself with the Chef server
         does an initial checkin
         applies any cookbooks that are part of its run-list
         an RSA private key is generated on node to enable the node to make API calls to Chef server
           (default location: /etc/chef/client.pem, need to be removed if want to bootstrap the second time)
  1) boostrap using username/password
     knife bootstrap <ip> --ssh-user <username> --ssh-password '<password>' --sudo --use-sudo-password \
       --node-name node1 --run-list 'recipe[<cookbook_name>]'
  2) boostrap using key-based authentication
     knife bootstrap <ip> --ssh-user <username> --sudo --identity-file <id_rsa> \
       --node-name <node_name> --run-list 'recipe[<cookbook_name>]'
  ex.
    knife bootstrap -c /path/to/knife.rb -V -y <FQDN> -E 'prod'
    -c: configuration file to use
    -V: --verbose
    -y: --yes
    -E: --environment ENVIRONMENT, set the Chef environment

# knife node list: list all successfully bootstrapped nodes
  ex. knife node list
      node1

# knife node show: view node data
  ex. knife node show node1
      Node Name:   node1
      Environment: _default

# knife ssh: update node's configuration when cookbook changes
  bootstrapping is a one-time process
  after that, run knife ssh to update node's configuration when cookbook changes
  1) update node using username and password
     knife ssh <ip> 'sudo chef-client' --manual-list --ssh-user <username> --ssh-password '<password>'
  2) update node using key-based authentication
     knife ssh <ip> 'sudo chef-client' --manual-list --ssh-user <username> --identity-file <id_rsa>
  ex.
    edit cookbook files
    knife cookbook upload learn_chef_httpd
    knife ssh <ip> 'sudo chef-client' --manual-list --ssh-user <username> --identity-file <id_rsa>

# knife node delete & knife client delete: delete the node from Chef server
  ex.
    $ knife node delete node1 --yes
      Deleted node[node1]
    $ knife client delete node1 --yes
      Deleted client[node1]node1 --yes

# Run rake
  run tests defined in a Rakefile: ex. foodcritic, rubocop and rspec tests
  cookbook tests:
    foodcritic: static validation (a helpful lint tool you can use to check your Chef cookbooks for common problems)
    rubocop: static validation
    rspec: unit test

# Run kitchen test
  run a converge and serverspec tests defined in a .kitchen.yml file 
    i.e. automatically test cookbook data across any combination of platforms and test suites
  kitchen list
  kitchen login <platform-suite>

# Commands
1) make chef to restore its original state
   sudo chef-client
     when a chef-client is run, it will perform all of the steps that are required to bring the node into the expected state
