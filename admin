# three admin rules
  1) backup everything (and validate the backup) regularly
  2) master the command line (avoid UI if possible)
  3) automate everything

# what is umask?
  umask: user file creation mask, which controls the file permissions when file or directory
    are created
  ex. write umask command in /etc/profile or ~/.bashrc
    umask 022 ==> permissive (default)
      directory permission 755 (rwxr-xr-x), file permission 644 (rw-r--r--)
    umask 026 ==> moderate
      directory permission 751 (rwxr-x--x), file permission 644 (rw-r-----)
    umask 027 ==> moderate
      directory permission 750 (rwxr-x---), file permission 644 (rw-r-----)
    umask 077 ==> severe
      directory permission 700 (rwx------), file permission 600 (rw-------)
  default umask: 022
    i.e. files created users by default are of permissions: 755 (cf. /etc/login.defs)

# chattr, lsattr
  lsattr: list file attributes on a Linux second extended file system
    ex.
      lsattr /etc/sudoers  ==> ----i--------e- /etc/sudoers
      i: immutable, even root cannot edit or delete the file, visudo will not work
  chattr: change file attributes on a Linux file system
    ex. chattr -i /etc/sudoers

  attributes: acdeijstuADST
    a: append only
    c: compressed
    d: no dump
    e: extent format
    i: immutable
    j: data  journalling
    s: secure  deletion
    t: no tail-merging
    u: undeletable
    A: no atime updates
    D: synchronous directory updates
    S: synchronous updates
    T: top of directory hierarchy

# how to change the default run level in linux?
  init: command that temporarily change run level, ex. init 3 (default level is 5)
  edit: /etc/inittab

# how to list or enable services that are enabled at a particular run level?
  list service: chkconfig --list | grep 5:on
  enable service: chkconfig <name_service> on --level 3

# default ports:
  SMTP: 25
  DNS: 53
  FTP: 20 (data transfer), 21 (connection established)
  DHCP: 67 (UDP, DHCP server), 63 (UDP, DHCP client)
  SSH: 22
  Squid: 3128

# what is network bonding?
  the aggregation of multiple LAN cards into a single bonded interface to provide fault
    tolerance and high performance (a.k.a NIC teaming)

# how to check default route and routing table?
  netstat -nr: default route
  route -n: routing table

# how to check which port are listening in my system?
  netstat --listen
  lsof -i

# lsof: list open files
  find out which processes are using a particular file
  lsof: list down PID of all the process which is using a particular file
    (COMMAND: process name, NAME: full path of open file, PID, USER, FD: file descriptor)
  lsof -u username: display open files of a particular user
  lsof filename: display users currently using filename
    (ex. /usr/bin/vim ==> display users currently using vim)
  lsof -n: inhibits the conversion of network numbers to host names for network files (run faster)

# change kernel parameters
  edit: /etc/sysctl.conf
  sysctl -p (make the changes permanently without rebooting)

# what is load average in a linux?
  the average sum of the number of process waiting in the run queue and the number of process
    currently executing over the period of 1, 5, and 15 minutes
  use top and uptime command to find out the load average

# what is GRUB?
  a multiboot boot loader (boot loader is the first software program that runs when a
    computer starts; it loads and transfer control to OS kernel software)

# explain linux boot process
  there are 6 high-level stages
  1) BIOS: basic input/output system
  2) MBR: master boot record
  3) GRUB: grand unified bootloader
  4) Kernel: kernel
  5) Init: init
  6) Runlevel: runlevel programs are executed from /etc/rc.d/rc[0-6].d/

# what is user profile file?
  $HOME/.bash_profile, $HOME/.bash_bashrc

# how to show user info?
  finger <username>

# w: who is logged on the system

# how to lock user password
  usermod -L username
  passwd -d username (remove user's password, user can login without password)

# dd: a useful backup command
  used by linux kernel makefiles to make boot images, need to be run as superuser
  ex.
  1) disk to disk backup
     dd if=/dev/sda of=/dev/sdb
     (backup an entire hard disk to another hard disk connected to the same system)
     (if: inputfile, of: output file)
     dd if=/dev/sda of=/dev/sdb conv=noerror,sync
     (conv=noerror: continue to copy if there are read errors, sync: copy via synchronized I/O)
  2) create an image of a hard disk
     dd if=/dev/hda of=/path/to/folder/hda.img
     (create and save the disk image file in other storage devices, allowing quick data restoring)
  3) restore disk using hard disk image
     dd if=/path/to/folder/hdadisk.img of=/dev/hdb
     (continuing 2, the above command restores /dev/hda to /dev/hdb)
  4) create a floppy image
     dd if=/dev/fd0 of=floppy.img
  5) backup a partition
     dd if=/dev/hda1 of=/path/to/folder/hda_partition1.img
  6) CDROM backup
     dd if=/dev/cdrom of=/path/to/folder/cdrom.iso bs=2048
     (if CD is auto mounted, unmount the CD device before creating the iso image)
     (bs=2048: specify the block size)

# rsync: remote sync, synchronize the files and directories from one location to another
  replicate the whole content between source and destination (local or remote) directories
  - speed: transfers only the changed blocks or bytes
  - security: allows encryption of data using ssh protocol
  - less bandwidth: uses compression and decompression of data
  ex.
  1) sync two local folders
    rsync -zvr /path/to/local/folder1/ /path/to/local/folder2/
    (-z: enable compression, -v: verbose, -r: recursive mode)
    (rsync does not preserve timestamps)
  2) sync with preservation of timestamps, symbolic links, and permissions, etc.
    rsync -avz /path/to/local/folder1/ /path/to/local/folder2/
    (-a: recursive mode, preserves symbolic links, permissions, timestamps, and owners and groups)
  3) sync only one file
    rsync -v /path/to/local/file /path/to/local/folder/
  4) sync to remote system, and vice versa
    rsync -avz /path/to/local/folder/ username@10.1.168.72:/path/to/remote/folder/
    rsync -avz username@10.1.168.72:/path/to/remote/folder/ /path/to/local/folder/
    Password: xxxxx (password required)
    (you can set up passwordless login to bypass the entering of passwords)
  5) enable the secured remote connection
    rsync -avz -e ssh username@10.1.168.72:/path/to/remote/folder/ /path/to/local/folder/
  6) do not overwrite the modified files at the destination
    rsync -avzu /path/to/local/folder/ username@10.1.168.72:/path/to/remote/folder/
  7) sync only the directory tree structure (not the files)
    rsync -v -d /path/to/local/folder/ username@10.1.168.72:/path/to/remote/folder/
  8) delete the target file at the destination if the file not present in the source
    rsync -avz --delete /path/to/local/folder/ username@10.1.168.72:/path/to/remote/folder/
  9) do not create new files at the destination (sync only existing files at the destination)
    rsync -avz --existing /path/to/local/folder/ username@10.1.168.72:/path/to/remote/folder/
 10) include and exclude file patterns
    rsync -avz --include '*.cpp' --exclude '*' /path/to/local/folder/ \
      username@10.1.168.72:/path/to/remote/folder/
    (include files and directories ending with .cpp and exclude all other files)
 11) do not transfer large files
    rsync -avz --max-size='10K' /path/to/local/folder/ username@10.1.168.72:/path/to/remote/folder/

# two steps to setup passwordless login
  login remote host without password
  1) ssh-keygen: creates public and private keys (local host)
  2) ssh-copy-id -i ~/.ssh/id_rsa.pub 10.1.168.72 (remote host)
     (appends the keys to remote host's ~/.ssh/authorized_key)
     or manually, copy public key to ~/.ssh/authorized_key
     (chmod 700 ~/.ssh and chmod 640 ~/.ssh/authorized_key)

# troubleshooting using dmesg
  when system boots up, kernel gets loaded into the memory and then kernel controls the entire
    system. the messages about the hardware devices are printed out on the screen and can be
    viewed using dmesg command
  1) view the boot messages: dmesg | more
  2) view avaiable system memory message: dmesg | grep Memory
  3) view Ethernet link status (UP/DOWN): dmesg | grep eth
  4) change the dmesg buffer size: edit /boot/config (change CONFIG_LOG_BUF_SHIFT=18)
  5) clear messages in dmesg buffer: dmesg -c

# rpm package management (Redhat/CentOS)
  rpm: Redhat Package Manager
  1) install an rpm package: rpm -ivh MySQL-client-3.23.57-1.i386.rpm
    (-i: install, -v: verbose, -h: print hash marks when the package is unpacked)
  2) query all rpm packages: rpm -qa
    (-q: query, -a: all installed packages)
  3) upgrade an rpm package: rpm -Uvh MySQL-client-3.23.57-1.i386.rpm
    (like installing, but automatically uninstalling existing version before installing)
  4) uninstall an rpm package: rpm -ev MySQL-client
    (-e: uninstall)
  5) verify all rpm packages: rpm -Va
    (-V: verify, -a: all installed packages)
  6) rebuild corrupted database indices:
     rm /var/lib/rpm/__db*; rpm --rebuilddb

# modprobe: used to add loadable modules to linux kernel, view and remove modules
  linux maintains modules in /lib/modules/$(uname -r)
    the configuration files: /etc/modprobe.conf and /etc/modprobe.d
  1) modprobe -l: list avaiable kernel modules
  2) lsmod: list currently loaded modules
  3) sudo modprobe vmhgfs: install new module vmhgfs into linux kernel
  4) modprobe -r vmhgfs: remove currently loaded module (-r: unload module)

# mount and view ISO files
  ISO: International Organization for Standardization
  ISO files, typically used to distribute operating systems
  mount /path/to/local/file.iso /tmp/mnt -o loop ==> a loop device is a pseudo-device

# chage
  used to manage password expiration and aging
  ex. chage -l username (list the info of password parameters of a user)

# WOL (WakeOnLan): power up server remotely
  1) NIC needs to support WOL feature
  2) enable wakeonlan of NIC: ethtool -s eth0 wol g
  3) install wakeonlan package on another machine: sudo apt-get install wakeonlan
  4) wake up from another machine connected to the same LAN (requires the mac address of NIC)
     wakeonlan 00:16:k5:64:A9:68

# lshw: list hardware spec
  supports html and xml format (lshw -html, lshw -xml)

# ipcs
  IPC (Inter-Process Communication)
  1) pipes: named pipes provide a way for processes running on different computer systems to
     communicate over the network
  2) shared memory: exchange messages in shared memory. one process can create a portion of
     memory which other process can access
  3) message queue: a structured and ordered list of memory segments where processes store or
     retrieve data
  4) semaphores: provide a synchronizing mechanism for processes that are accessing the same
     resource. no data is passed with a semaphore, it simply coordinates access to shared resources
  ipcs -a: list all the IPC facilities which has read access for the current process

# logrotate: manage log files
  rotate the log files, compress the rotated log files, log files with date filenames,
    remove old log files
  edit /etc/logrotate.conf

# ssh
  options -T: Disable pseudo-tty allocation
    do ssh test connection with -T, because some server could abort the transaction entirely
    if a text-terminal (tty) is requested. -T avoids requesting said terminal, since GitHub
    has no intention of giving you an interactive secure shell, where you could type command.
    GitHub only wants to reply to your ssh request, in order to ascertain that the ssh command
    does work (have the right public/private keys, and the public one registered to GitHub)

# print subdirectories recursively
  find /path/to/folder -type d -print

# ls: show only directories
  ex.
    ls -d /var/log/*/

# mv
  mv -fv /path/to/file /path/to/folder/
  options:
    -f: do not prompt for confirmation before overwriting the destination path
    -v: be verbose, showing files after they are moved

# rm
  mv -rf /path/to/folder
  options:
    -f: do not prompt for confirmation before removing files
    -r: be recursive

# skeleton files for bash environment: (.bash_profile and .bashrc)
  /etc/skel/.bash_profile
  /etc/skel/.bashrc
  /etc/skel/.bash_logout

# locale: Get locale-specific information

# configure, make, make install
 1) configure: preparation of building the software on your specific system, making sure
    that all the dependencies for the rest of the build and install process are available, and
    finding out whatever it needs to know to use those dependencies
 2) make: runs a series of tasks defined in a Makefile to build the program from its source code
 3) make install: once the software is built and ready to run, the files need to be copied to
    their final destination, so make install will copy the built program and its libraries and
    documentations to the correct locations

# make
  make -C [dir] [target]
  options:
    -C: change to directory dir before reading the makefiles or doing  anything
  ex. make -C dir html ==> cd dir; make html

# uname -a: find out whether the system is 32 or 64 bit
  find out which operating system is running on in UNIX

# /proc/cpuinfo: find cpu information os the system
  cat /proc/cpuinfo

# run a process in background, foreground, and kill it 
  ./prog1 &     ==> run in background
  fg [JobId]    ==> bring to foreground
  kill -9 [PID] ==> kill a process
    signals: 9  ==> KILL, non-catchable, non-ignorable kill
             15 ==> TERM, software termination signal (default)

# suspend process:
  CTRL + z to suspend running process and fg 1, fg 2 to bring it on foreground

# execute previous commands:
  1) !"cmd": execute last command of cmd
  ex.
    vim filename
    !vim     ==> executes last vim command
  ex.
    ls -lrt
    !ls      ==> executes last ls command
  2) !!: execute last command
  3) CRTL + r and type command initials
  4) history | grep command

# cd: move across directories
  ex.
    cd ~       ==> move to home directory
    cd -       ==> move to previous directory

# ls -t: list files in order of reversed modified time
  ls -lrt

# su: switch to other user
  sudo su - [username] (if no sudo, then need to enter username's password)
  options:
    -: use login-shell, which resets most environment variables and provides a clean base
       without -, it provides a normal shell with an environment nearly same as the old user
    [username]: if not provided, it will switch to root
  (always use su - [username] instead of su [username] for security reason)

# id: list UID/GID information
  id: list your UID/GID information
  id [username]: list username's UID/GID information

# finger: list user's information
  finger: list your user information
  finger [username]: list username's information

# last: show listing of last logged in users
  1) rotated log files under /var/log:
  ex.
     wtmp
     wtmp-20160316
     wtmp-20160412
     wtmp-20160506 
  2) read the log files:
     last -f /var/log/wtmp-20160506
  3) last -n [num]: display [num] lines

# lastb: show listing of last bad logged in users (sudo required)
  1) rotated log files under /var/log:
  ex.
     btmp
     btmp-20160501
  2) read the log files:
     sudo lastb -f /var/log/btmp-20160501
  3) sudo lastb -n [num]: display [num] lines

# who: show who is logged on

# fuser: identify processes using files or sockets
  ex.
    fuser /mnt  ==> identify process that is using the mounted folder

# sysctl: configure kernel parameters at runtime
  options:
    -a: display all values currently available
    -w:
  sysctl -w kernel.hostname=new_fqdn

# less
  less -S filename
  (-S, --chop-long-lines: causes lines longer than the screen width to be chopped)

