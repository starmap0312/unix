# IDE: IntelliJ IDEA
  1) Java Libraries: a set of class files stored in an archive or directory
     a Java library includes class files, archives, directories with class files, and
     directories with Java native libraries (.dll, .so or .jnilib)
  2) Project: the highest level of organization in the IDE
  3) Module: a discrete unit of functionality which you can compile, run, test and debug independently
     a) Every project consists of modules
     b) Module dependencies: classes, archives, libraries and resources that your module files references
        A module can be a dependency for another module in the project

# Import Project from build.sbt
  1) run "Import projects/modules from existing sources"
  2) select JDK 1.8
  3) select file build.sbt & check auto-import on the fly

# Change Scheme and Font sizes
  Preferences -> Appearance & Behavior -> Appearance
    set Theme to Darcula
    check Override default fonts by
  Editor -> Colors & Fonts -> Font
    set Editor font

# Shortcuts
  1) Run:       Ctrl + R + Shift
  2) Debug:     Ctrl + D + Shift
     Step Over: Fn + F8
     Step Into: Fn + F7
     Step Out:  Shift + Fn + F8
     Resume:    Cmd + Option + R
     Show Exec: Option + Fn + F10
     Jump to class declaration/Show usages of a class: Cmd + Mouse Click
  3) Editor
     Jump to file beg: Cmd + Fn + <-
     Jump to file end: Cmd + Fn + ->
     Jump to line    : Cmd + l
     Jump to declaration: Cmd + Click
  4) Search
     Find keyword in file   : Cmd + F
     Replace keyword in file: Cmd + R
     Find keyword in project: Shift + Cmd + F
     Search Everywhere (ex. filename): Shift + Shift
  5)
     Enter Action or Option Name: Shift + Cmd + A (ex. reimport all Maven libraries)

# Install intellij PlugIns
  Preferences -> PlugIns -> ex. search for "Scalariform"

# issues
  1) Cannot find declaration to go to:
     rm -rf .idea/ & re-open the project
     then it will re-resolving all the dependencies again
  2) Import SNAPSHOT libraries for use of another developing library:
     1.1) publish the library to be used, mylib_2.11, to "maven-local-snapshot"
     1.2) edit the pom.xml of the developing library
       <distributionManagement>
         <snapshotRepository>
           <id>maven-local-snapshot</id> # specify URL of maven-local-snapshot
           <url>scpexe://artifactory-ssh-proxy.mydomain.com:4443/maven-local-snapshot/</url>
         </snapshotRepository>
         <repository>
           <id>maven-local-release</id>
           <url>scpexe://artifactory-ssh-proxy.mydomain.com:4443/maven-local-release/</url>
         </repository>
       </distributionManagement>
       ...
        <dependency>
            <groupId>com.mydomain</groupId>
            <artifactId>mylib_2.11</artifactId>
            <version>0.1.4-SNAPSHOT</version>   # specify version of SNAPSHOT library in dependency
        </dependency>
     1.3) reimport all Maven libraries to get the latest published SNAPSHOT library
          intellij shortcut: Shift + Cmd + A (enter & click "reimport all Maven libraries"), or
          Go to pom.xml, right-click "Maven", click "reimport all Maven libraries"/"Download Sources and Documentations"
 3) Cannot find dependencies:
    ex. <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-core</artifactId>
            <version>2.1.0</version> # highlighted
        </dependency>
    then 
    3.1) click the highlighted dependency in pom.xml -> update maven indices
    3.2) Right-Click at pom.xml -> Maven -> reimport
 4) Disable "Optimize imports on the fly"
    problem: enabling this option will produce a lot of diffs if team members are using different IDEs, so it is disabled by default
    intellij shortcut: Shift + Cmd + A (enter & click "Default settings")
    uncheck "Auto Import" -> "Optimize imports on the fly"
 5) No "Run All Tests" when right clicking a project folder, or code shows warning of "Cannot resolve symbol"
    3.1) need to import the project by build.sbt with "JDK 1.8" specified as the JDK version
    i.e. Close all projects and re-open intellij application
         Click "Import Project" and select the build.sbt file
    3.2) rm -rf target/ and run "sbt test" at console (Compiling Scala sources and Java sources to target/)

# auto-import
1) Use auto-import option:
   when you imported your project than your dependency is imported automatically
2) No auto-import option:
   after you have added your dependency in the build.sbt file,
   press Refresh all SBT projects button in the SBT tool window to import the dependency

# add scala to project
  in Menu, select File -> Project Structure -> Platform Setting -> Global Libraries -> Scala SDK 
