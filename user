# create linux user
  1) useradd username    ==> create user with default configurations
     userdel -r username ==> delete user
       -r, --remove: user home directory and mail spool will be removed (default is to keep)
  2) adduser username ==> create users interactively
  3) newusers filename ==> create bulk users from file (the same format as /etc/passwd)

# create linux group
  1) create a group: sudo groupadd <group_name>
  2) check if <group_name> exists: egrep -i "^group_name" /etc/group

# what is user profile file?
  $HOME/.bash_profile, $HOME/.bash_bashrc

# how to show user info?
  finger <username>

# how to lock user password
  usermod -L username
  passwd -d username (remove user's password, user can login without password)

# add users to sudoers
  1) visudo (need to login as root or su)
  2) add a line: username ALL=(ALL:ALL) ALL

# sudo
  1) validate:
    sudo -v: validate, sudo will update the user’s cached credentials, authenticating the user’s
             password if necessary; this extends the sudo timeout for another 5 minutes but 
             does not run a command
  2) run command as <username>
    sudo -su <username> -H [command]
      -u user: run the specified command as a user other than root
      -H: HOME, set the HOME environment variable to the home directory of the target user (default)
      -s [command]: runs the shell specified by the SHELL environment variable (i.e. /etc/passwd)
                    if no command is specified, an interactive shell is executed
    sudo sh -c "<command>": runs the commands in a sub-shell
    su - <username> -c '<command>': execute only one command as username
    sudo -u <username> <command>
  3) switch to <username>
    a) sudo:
      sudo -iu <username> OR sudo su - <username>
        -i: simulate initial login, source file .profile will be read (NOT .bashrc), start at $HOME folder
            runs the shell specified in the /etc/passwd entry of the target user as a login shell
        -u: let sudo run the specified command as username other than root
      sudo -su <username> 
        -s: runs the shell, source file .bashrc will be read (NOT .profile), does not start at $HOME folder
    b) su: substitute user identity
      su - username
        switch to username by entering username's password
      sudo su - username
        switch to username by entering the superuser's (sudoer) password
      sudo su -
        switch to root by entering the superuser's (sudoer) password
        by default, only users in the admin / wheel / sudoer groups can switch to UID 0 (root)
  4) sudo -E <command>
     -E: preserve environment, user wishes to preserve their existing environment variables
     ex. sudo -E pip install cx_Oracle

# /etc/sudoers

  <user> <hosts> = (<users>:<groups>) [NOPASSWORD :] <commands>

  alan ALL     =           ALL    ==> alan ALL     = (root)    ALL

    user alan can run ALL command as user (root) on any host
    i.e. sudo <command>           ==> alan can run command as root but needs to enter his password

  alan ALL     = (ALL)     ALL

    user alan can run ALL commands as (ALL) users on ALL host
    ex. sudo -u oracle <command> (run command as user oracle, need to enter his password)

  alan ALL     = (ALL)     NOPASSWD: ALL

    user alan can run ALL commands as (ALL) users on ALL host without password
    ex. sudo -u oracle <command>  ==> alan can run command as user oracle and does not need to enter his password

  alan ALL     = (ALL:ALL) ALL

    user alan can run ALL commands as ALL users and as ALL groups

  dgb  boulder = (operator) /bin/ls, (root) /bin/kill, /usr/bin/lprm

    user dgb can run command /bin/ls as user (operator), and commands /bin/kill and /usr/bin/lprm as (root)

# wheel: groupname
  1) Mac OS X and BSD UNIX
  2) for a group of trusted people that could become superuser by using the su command
  3) only allow people in wheel group to become superuser using su

# nobody: username/groupname
  1) a  a pseudo, headless user with the least permissions on the system
     i.e. not assigned to any file or directory (as owner)
          nobody user should have no shell assigned to it (i.e. /sbin/nologin or /bin/false)
  2) sudo grep nobody /etc/shadow: nobody doesn't have a password
  3) sudo su nobody: leave you in a pretty desolate sh shell
  4) when to use nobody user?
     when permissions aren not required for a program operations, ex. no disk activity
  5) real-world examplex
     ex. memcached (a key-value in-memory cache) is running under the nobody account, because it does not
         need any permissions (no write access to files)
     ex. in earlier Unixes and Linux distributions daemon (ex. a webserver) were called under user nobody
         but as more and more daemons are running with nobody user, it is no longer secure
         today, daemons have their own user
     ex. NFS daemon still needs the nobody user
         if the owner of a file or directory in a mounted NFS share doesn't exist at the local system,
         it is replaced by the nobody user and group
