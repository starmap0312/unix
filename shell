# shebang: #!/bin/bash"
  the script is to be executed by /bin/bash
  ("#" is called hash and "!" is called bang)

# two types of variables
  1) environment variables (system-defined variables):
     ex. echo $PATH
  2) shell local variables (user-defined variables):
     ex.
       VAR=1
       echo $VAR
  3) use "export" to export VAR to environment variables
     ex.
       export VAR=1
  3) "set" can display all shell local variables and environment variables, whereas "env" cannot

# debugging bash scripts
  1) bash -x /path/to/script
     -x: run the entire script in debug mode
         traces of each command plus its arguments are printed to stdout

  2) set -e: enables checking of all commands
     aborts the execution when a command fails
     if a command exits with error and caller does not check such error, then the scripts aborts immediately
     ex.
       set -e
       ls /var
       ls /unknown  ==> exit status of the command is not 0, the scripts aborts here
       ls /tmp      ==> this command will not be executed

  3) set -x: trace the execution of all commands (or use "set -o xtrace")
     make the interpreter print each command right before it is executed
     ex.
       set -x
       ls /var &> /dev/null
       ls /tmp &> /dev/null

       (stdout)
       + ls /var
       + ls /tmp
  4) set -u: no unset variables (or use "set -o nounset")
     aborts the execution if an unset variable is used
     ex.
       echo $unsetVar                                    ==> error: unbound variable, exits with 1
       echo "this line will not be executed"
  5) trap <command> <signal>: error handling for singal
     trap - <signal>: unset error handling for signal
     signal:
       a) INT: Interrupt
          the signal is sent when someone kills the script by pressing Ctrl-C
       b) TERM: Terminate
          the signal is sent when someone sends the TERM signal using the kill command
          ex. kill PID (kill -SIGTERM PID, kill -15 PID)
       c) EXIT: Exit (a pseudo-signal and is triggered when your script exits)
          the signal is sent when
          i)   reaching the end of the script
          ii)  an exit command
          iii) a command failing when using set -e

     ex. implement a scirpt with the critical section using a lock file

       (without error handling)

         if [ ! -e $lockfile ]; then
             touch $lockfile
             ... enter critical section and do something ...
             rm $lockfile
         else
             echo "some other task is already running"
         fi
         (the problem occurs when the script is interrupted by Ctrl-C, killed, or a failed command when set -e)

       (with error handling)

         if [ ! -e $lockfile ]; then
             trap "rm -f $lockfile; exit" INT TERM EXIT
             touch $lockfile
             ... enter critical section and do something ...
             rm $lockfile
             trap - INT TERM EXIT
         else
             echo "some other task is already running"
         fi
         (delete the lock file when interrupted)

     ex.
       set -e
 
       clean_exit() {
           local rc="$?"
           ... do some clean jobs      ...
           ...   ex. <command> || true ...  ==> let command do not exit because of set -e when it fails
           ... do some clean jobs      ...
          return $rc
       }

       trap "clean_exit" EXIT

       ... do main tasks ...

# variable substitution
  var=value  ==> set var to a value (note: no spaces are allowed before and after "=")
    ex.
      var1=123
      var2=oneTwoThree
  ${var:=value}     ==> use var if set; use new value if undefined, and redefine
    ex.
      ${var3:=123}
      this will set var3=123 if $var3 is undefined
  ${var4:-value}    ==> If parameter is unset or null, use value; otherwise, use the value of $var4 
    ex.
      echo ${var3:-123}
      a) this will echo value 123 if $var3 is undefined/null (but unlike ${var:=value}, it will not set the value of $var3)
      b) it will echo $var3 if $var3 has a value
    ex.
      var3=${var3:-123}
      set var3=123 if $var3 is undefined or null

# default variables 
  $?: whether the previous command is executed successfully (0: successful)
      (i.e. the exit status of the previous command)
  other special variables:
  $0: name of the script
  $1: 1st argument
  $2: 2nd argument
  $#: number of arguments (ex. script_name 1 2 3, then $# == 3)
    ex. if [ $# != 3 ]; then echo usage; fi
  $@: an array-like construct of all positional parameters, { $1, $2, $3, ... }
  $*: all arguments separated with spaces, $1 $2 $3 ...
  $$: PID of current shell (not subshell)
  $!: PID of the most recent background command

# unset or de-assign a variable
  unset variable_name

# how to read input from terminal?
  ex.
    echo "Input value for variable A"
    read A
  or
    read -p "Input value for variable A: " A
    echo "variable A is $A"

# quotes in shell
  1) weak quotes: "..."
    echo "print out the value of $var"
  2) strong quotes: '...'
    echo 'print out $var literally'
  3) command substitution: `command` or $(command)
    echo `pwd` or echo $(pwd)
    sudo chown `id -u` /folder_name  ==> sudo chown 1000 /folder_name (ex. user id == 1000)

# redirect both stdout and stderr to the same location
  handle 0: stdin, 1: stdout, 2: stderr
  1) method 1: 2>&1
      ex. ls -l > output 2>&1
          yum install [pkg_name] 2>&1 > inst.log (redirect stdout/stderr message to a file)
  2) method 2: &>
      ex. ls -l &> output

# error redirection (file descriptor: 0: stdin, 1: stdout, 2: stderr)
  ex.
    du -sh 2> err_file
    du -sh 2> /dev/null (redirect "... Permission denied ..." error to /dev/null)

# compare numbers
  -eq: equal
  -ne: not equal
  -gt: greater than
  -lt: less than
  -ge: greater than or equal
  -le: less than or equal

  ex.
  x=10              <==== there cannot be spaces surrounding = (i.e. no x_=_10)
  y=20              <==== there cannot be spaces surrounding = (i.e. no y_=_10)
  if [ $x -gt $y ];  <==== use $variable_name to access variable
  then
      echo "x > y";
  elif [ $x -eq $y ];
  then
      echo "x = y"
  else
      echo "x <= y";
  fi

  ex.
  if [ $? -ne 0 ];
  then
      echo last command failed
  fi

# perform arithmetic operation
  a=`expr 5 + 2`   ==> "+" in 5_+_2 must be surrounded by spaces
                               `expr ...` is needed as expr is a command
  a=$[ 16 + 4 ]    ==> $[ expression ] is an alternative way of arithmetic operation

# extract substring
  ${string:position:length}
  ex.
    var=12345
    echo ${var:2:2}  ==> 34

# substring removal
  ${string##substring}: deletes longest match of substring from front of $string
  ex.
    var="abcde"
    echo ${var##ab}  ==> prints out "cde"
    var2="foldername/"
    echo ${var2##*/} ==> * indicates wildcard, so it prints out $var2 unless it is a string that ends with "/" (ex. foldername) 

# test command: compare strings and test files
  1) compare strings
     test str1 == str2: equal (there must be spaces surrounding _==_)
     ex.
       str1="abc"
       test $str1 == "abc" && echo "str1 equals abc"

       if [[ $str1 == "abc" ]];
       then
           echo "str1 equals abc";
       fi

     test str1 != str2: not equal (there must be spaces surrounding _!=_)
     test -z str: empty string
     test -n str (test str): not empty string (-n can be omitted)
     ${#str1} ==> get string length, i.e. 3

  2) test files
     test -e filename: does filename exist? i.e. [ -f filename ]
     ex.
       [ -f /etc/hosts ] && echo "Found: /etc/hosts" || echo "Not found: /etc/hosts"

       if [[ -f /etc/hosts ]];
       then
           echo "Found: /etc/hosts"
       else
           echo "Not found: /etc/hosts"
       fi

     test -f filename: is a file?
     test -d filename: is a directory?
     ex.
       if [[ ! -d /path/to/folder ]]; then mkdir -p /path/to/folder; fi

     test -r filename: readable?
     ex.
       if [[ -r /path/to/file ]]; then do_something; fi

     test -w filename: writable?
     test -x filename: executable?
     test -s filename: file not empty? (test if filename exists and has a size greater than zero)
     ex.
       test -s filename || { echo "non-empty filename does not exist! Exit with 1"; exit 1; }

     test -S filename: test if filename exists and is a socket
     test -p filename: test if filenmae exists and is a named pipe

# how to define function?
  function_name()
  {
      commands
  }

  ex.
    func()
    {
        echo "the input parameters is $@"
        echo "the first parameter is $1"
    }
    func 1 2 3 <== execute func and pass in three parameters: 1, 2, 3


# nested if statement
  if [ condition ];  <==== [_condition_] must have spaces surrounding condition
  then              <==== must be put in a distinct line (cannot be put after the if-statement)
      command1;
      command2;
  else              <==== must be put in a distinct line
      if [ condition ];
      then
          command3;
      else
          command4;
      fi
  fi                <==== must be put in a distinct line

# the while-loop statement
  while [ condition ];
  do
      command;
  done

# the for-loop statement
  for var in value1 value2 value3;
  do
      command;
  done

  ex.
  for a in dog cat tiger;
  do
      echo "$a";
  done

  ex.
  for i in `seq 1 10`;
  do
      echo $i;
  done

  ex.
  START=3
  END=7
  for i in $(seq $START $END);
  do
      echo $i;
  done

  ex. read in a file line by line
  OLD_IFS=$IFS
  IFS=$'\n'
  for i in $(cat filename);
  do
      echo $i
  done
  IFS=$OLD_IFS

# the switch statement
  case $var in
  value1)
      command1
      command2
      ;;
  value2)
      command3
      command4
      ;;
  *)
      command5
      ;;
  esac

  ex.
  a=5
  case $a in
  1)
      echo "$a == 1"
      ;;
  2)
      echo "$a == 2"
      ;;
  *)
      echo "$a != 1 and $a != 2"
      ;;
  esac

# double-dash
  a double dash (--) is used in bash built-in commands to signify the end of command options
    after which only positional parameters are accepted
  ex.
    grep -- -v filename ==> grep keyword "-v" (-- signify that -v is not an option for grep)
    
# =~: Equal Tilde operator
  1) allows the use of regex in an if statement
     the string to the right of the operator is considered an extended regular expression and matched accordingly
  2) the return value is 0 if the string matches the pattern, and 1 otherwise
  ex.
    [[ $date =~ ^[0-9]{4}(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])$ ]] && echo "yes"
    #           |^^^^^^^^ ^^^^^^ ^^^^^^  ^^^^^^^^^^ ^^^^^^ |
    #           |   |         |                   |        |
    #           | year YYYY   |      either 00-29 or 30,31 |
    # start of line  either 0X or 10,11,12                end of line

# <<<: here string
  COMMAND <<<$WORD
  1) a stripped-down form of a here document
  2) the value of $WORD is expanded and fed to the stdin of COMMAND

    ex.
      a) if [[ $VAR = *txt* ]]; then do_something; fi
      b) if echo "$VAR" | grep -q txt; then do_something; fi
      c) if grep -q "txt" <<< "$VAR"; then do_something; fi

    ex.
      wc -w <<< "This is a test."
      output: 4

    ex. grepping into a shell variable
      var="Neither in this world nor elsewhere is there any happiness in store for him who always doubts."
     
      grep "nor" $var (WRONG)
      output: grep: Neither: No such file or directory

      grep "nor" <<<$var >/dev/null && echo "Found" || echo "Not found" 
      output: Found

      alternatively: use shell pipes to grep into $var
      echo $var | grep -q "nor"  && echo "Found" || echo "Not found"

   ex. Counting network interfaces
     wc -w <<<$(netstat -i | cut -d" " -f1 | egrep -v "^Kernel|Iface|lo")
     output: 3

     wc <<< $(cat filename)
     output: 1    1374    7571
     i.e. cat filename | wc

# Shell Arrays
  1) Defining Array Values:
     array_name[index]=value
     ex.
       NAME[0]="Zara"
       NAME[1]="Qadir"
       NAME[2]="Mahnaz"
     in bash: array_name=(value1 ... valuen) 
     ex.
       NAME=("Zara" "Qadir" "Mahnaz")
  2) Accessing Array Values: ${array_name[index]}
     ex.
       echo ${NAME[0]}
       echo ${NAME[1]}
       echo ${NAME[2]}
  3) access all the items in an array
     ${array_name[*]}
     ${array_name[@]}

# shell options
  myArray=( "$@" )  ==> assign all positional parameters, { $1, $2, $3, ... }, to an array

  shift command: (in bash)
    shift [N]: the positional parameters are shifted to the left by N
    i.e. shift
         the positional parameters $1 - $# are renamed:
         before: $1, $2, $3, ..., $#
         after:      $1, $2, ..., $# ($# is decremented by one)

  ex. read in options by while-loop and shift command:

  while test "$1"; do     ==> if "$1" is not empty
      case "$1" in
          --help)         echo "usage"; exit 0;;
          --version)      echo "version"; exit 0;;
          --)             shift; break;;
          *)              break
      esac
      shift
  done

  test "$1" || {
      echo "need more options"
      exit 1
  }


  ex. read in options by a for-loop

  for arg in "$@" ; do
      case "$arg" in
          http://*|https://*|ftp://*)  => read http://, https://, ftp://
              do_something;
              ;;
          *.[rs]pm)                    => read *.rpm, *.spm
              do_something;
              ;;
          *)
              do_something;
      esac
  done
  
# concatenate the values of an array to a string
  for arg in "${myArray[@]}"; do
      options="$options $arg"
  done

# variable scopes
  1) function paramters
  ex. ./filename.sh arg1

      #!/bin/bash
      function func
      {
          echo $1    ==>   $1 == arg2
          var="hello world"
      }
      echo $1        ==>   $1 == arg1
      func arg2;
      echo $1        ==>   $1 == arg1
      echo $var      ==> $var == "hello world"

    a) function has its own parameters: $1, $2, etc. and they do not overwrite the global script parameters, and
       they do not live outside of the function)
    b) the variables set inside (outside) a function will continue to live, right after they are set

  2) if a script executes another script, their variables won't extend to current script

# comment out multiple lines

  <<COMMENT
  ...
  code
  ...
  COMMENT

# /dev/null
  1) </dev/null [some commnad]:
     used to send EOF to the program, so that it does not wait for input 
     ex. </dev/null openssl s_client -connect www.google.com:443
  2) [some command] 2>/dev/null:
     redirect stderr to /dev/null, so that error will not be outputed in console
     ex. </dev/null openssl s_client -connect www.google.com:443 2>/dev/null
  3) openssl s_client -connect [hostname]:[port] 2>/dev/null </dev/null | openssl x509 -noout -enddate
