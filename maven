# path of resolved/downloaded dependency jars or installed local SNAPSHOT jar
(maven)
  ~/.m2/repository/[groupId]/[artifactId]/[version]/[artifactId]-[version].jar
  ex. ~/.m2/repository/mydomain/mylib/5.54-SNAPSHOT/mylib-5.54-SNAPSHOT.jar
(sbt)
  ~/.ivy2/cache/[groupId]/[artifactId]/jars/[artifactId]-[version].jar
  ex. ~/.ivy2/cache/mydomain/mylib/jars/mylib-5.54-SNAPSHOT.jar .

# Maven
  1) generate project (download packages from internet to local repository)
     mvn archetype:generate
     ex.
       mvn archetype:generate -DgroupId=com.myMaven.app -DartifactId=HelloMaven \
       -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
         -DgroupId: package group Id, ex. com.myMaven.app (organization or company)
         -DartifactId: the project name, i.e. HelloMaven
         -Dversion: project version (default: 1.0-SNAPSHOT)
         -DarchetypeArtifactId: template used to create the project
  2) pom.xml
     information of the package
       <dependency>
           <groupId>com.myMaven.app</groupId>
           <artifactId>HelloMaven</artifactId>
           <version>1.0-SNAPSHOT</version>
       </dependency>
     groupId:artifactId:version specifies a unique package
       a group can have multiple artifacts (projects)
       a artifact (project) can have multiple versions
  3) compile source (at the folder of pom.xml): this generates class files in target/
     mvn compile
     - HelloMaven
       - pom.xml
       - src
         - main - java - com - myMaven - app - App.java
         - test - java - com - myMaven - app - AppTest.java
       - target (processed data and final package file)
  4) execute program
     mvn exec:java -Dexec.mainClass=com.myMaven.app.App
     App.java
       public class App {
           public static void main(String[] args) {
               System.out.println("Hello Maven!");
           }
       }
  5) create package file: this generates .jar file in target/
     mvn package
     create .jar file (packaging) based on pom.xml
     create .war file (packaging) based on pom.xml, which will be deployed to Tomcat/JBoss server
  6) clean/remove target folder: this removes target/ folder
     mvn clean
  ex. mvn -DskipTests=true clean package # skip Tests when packaging at target/ folder, ex. target/storm-starter-0.9.3-incubating-SNAPSHOT.jar
  ex. mvn -DskipTests=true clean install # skip Tests when installing package at local repo, ex. ~/.m2/repository/org/apache/storm/

  7) show dependencies: this shows all dependencies (including transitive dependencies) of your project
     mvn dependency:tree
     it is very helpful for debugging dependency version issues.
     ex.
     [INFO] mygroup:myartifact:jar:1.0-SNAPSHOT
     [INFO] +- com.yahoo.vespa:vespa-http-client:jar:6.248.120:compile
     [INFO] |  +- com.google.code.findbugs:annotations:jar:1.3.9:compile
     [INFO] |  +- com.google.guava:guava:jar:18.0:compile
     [INFO] |  +- org.apache.httpcomponents:httpclient:jar:4.4.1:compile
     [INFO] |  |  +- commons-logging:commons-logging:jar:1.2:compile
     [INFO] |  |  \- commons-codec:commons-codec:jar:1.9:compile

     in the above tree, it means you add a dependency of artifect vespa-http-client:6.248.120 to the pom.xml file, and it furthur depends on other artifacts such as httpclient:4.4.1

     (note: in sbt project, run command: add "sbt-dependency-graph" plugin, and then run command: sbt dependencyTree)

# build the libraries with dependencies
  1) add dependencies in a jar:
     you can put both log4j.jar and jodatime.jar inside the final.jar, but your classes are unable to call other classes which is inside the unpack log4j.jar
  2) use maven-assembly-plugin to extract all dependency jars into raw classes, and group it together
     add "maven-assembly-plugin" plugin & configure at pom.xml (need to reimport maven project to take effect)
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.6</version>
                <executions>
                    <execution>
                        <id>package-with-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <appendAssemblyId>false</appendAssemblyId>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                </configuration>
            </plugin>
        </plugins>
    </build>
  3) with Maven 2, the right way to do this is to use the Maven2 Assembly Plugin which has a pre-defined descriptor file
     just run command:
       mvn clean compile package, or
       mvn assembly:assembly -DdescriptorId=jar-with-dependencie -DskipTests
       (the descriptorId is appended to the built library: ex. mylib-5.54-SNAPSHOT-jar-with-dependencies.jar)
     then, the jar file will include all class files of the dependencies
       ex. all the class files of dependency: "org.apache.httpcomponents:httpcore:jar:4.4.1" are packed in the jar file in the following folders: 
       ├── org
       │   ├── apache
       │   │   ├── commons
       │   │   └── http
       │   │       ├── ssl
       │   │       │   ├── AbstractHttpClientConnection.class
       │   │       │   ├── PrivateKeyDetails.class
       │   │       │   ├── PrivateKeyStrategy.class
       │   │       │   ├── SSLContextBuilder$KeyManagerDelegate.class
       │   │       │   ├── SSLContextBuilder$TrustManagerDelegate.class
       │   │       │   ├── SSLContextBuilder.class
       │   │       │   ├── SSLContexts.class       (the class is defined in "package org.apache.http.ssl;", to use the class we write "import org.apache.http.ssl.SSLContexts")

# mvn install
  it checks the dependency tree based on configuration of pom.xml on all the subprojects under the super pom.xml (the root POM)
  it downloads and compiles all the needed components under ~/.m2/ 
  the build life cycle of the mvn:
    process-resources -> compile -> process-test-resources -> test-compile -> test (to skip this step: -DskipTests=true) -> package -> install -> deploy
  it will then install the developping library to local repo:
    ~/.m2/repository/[groupId]/[artifactId]/[version]/[artifactId]-[version].jar
    ~/.m2/repository/[groupId]/[artifactId]/[version]/[artifactId]-[version].pom
  ex.
    ~/.m2/repository/com/mydomain/myproject/5.54-SNAPSHOT/mylib-5.54-SNAPSHOT.jar
    ~/.m2/repository/com/mydomain/myproject/5.54-SNAPSHOT/mylib-5.54-SNAPSHOT.jar

  then other libaries can put the local repo in the rependency resolver to use the locally installed developping library
  1) add to sbt dependency repo:
     add file "dev.sbt" with the following content:
       resolvers in ThisBuild += "My artifactory Snaps" at "http://artifactory.mydomain.com:4080/artifactory/maven-local-snapshot" # remote snapshot repo
       resolvers in ThisBuild += "Local Maven Repository" at Path.userHome.asFile.toURI.toURL + ".m2/repository"                   # local snapshot repo
       or
       resolvers ++= Seq(
         "My artifactory Snaps" at "http://artifactory.mydomain.com:4080/artifactory/maven-local-snapshot" # remote snapshot repo
         "Local Maven Repository" at "file:///Users/kuanyu/.m2/repository"                                 # local snapshot repo
       )
  2) add to maven dependency repo:
     ???

# Maven Lifecycle
  1) Clean lifecycle
     clean: remove all files generated by the previous build
  2) Default lifecycle
     compile: compile the source code of the project
     test: run tests using a suitable unit testing framework
     package: take the compiled code and package it in its distributable format, ex. .jar
     itegration-test: process and deploy the package if necessary into an environment for running integration test
     install: install the package into the local repository, for use as a dependency in other projects locally
     deploy: copies the final package to the remote repository for sharing with other projects
  3) Site lifecycle
     site: generate the project's site documentation
     site-deploy: deploy the generated site documentation to the specified web server
  ex.
    mvn package
    execute phases: compile, test-compile, test, mvn jar:jar

# commonly execute goals
  1) mvn compile
  2) mvn test
     mvn -Dtest=[TestClass] verify              # run a specific test
     mvn -Dtest=[TestClass]#[testMethod] verify # run a specific test method of a test
  3) mvn package
  4) mvn install: install package into local repository
  5) mvn source:jar: pack the source code into a .jar
  6) mvn jetty:run / mvn tomcat:run: execute web project
  7) mvn javadoc:jar: generate java api .jar file
  8) mvn exec:exec: execute project

# ~/.m2/settings.xml: configuration file
  1) element in the file contains elements used to define values which configure Maven execution in various ways
     ex. values such as the local repository location, alternate remote repository servers, and authentication information
  2) it's like the pom.xml, but should not be bundled to any specific project, or distributed to an audience

# import SNAPSHOT libraries for use of another developing library:
  1) publish the library to be used, mylib_2.11, to remote artifactory of "maven-local-snapshot"
  2) edit the pom.xml of the developing library
       <distributionManagement>
         <snapshotRepository>
           <id>maven-local-snapshot</id> # specify URL of maven-local-snapshot
           <url>scpexe://artifactory-ssh-proxy.mydomain.com:4443/maven-local-snapshot/</url>
         </snapshotRepository>
         <repository>
           <id>maven-local-release</id>
           <url>scpexe://artifactory-ssh-proxy.mydomain.com:4443/maven-local-release/</url>
         </repository>
       </distributionManagement>
       ...
        <dependency>
            <groupId>com.mydomain</groupId>
            <artifactId>mylib_2.11</artifactId>
            <version>0.1.4-SNAPSHOT</version>   # specify version of SNAPSHOT library in dependency
        </dependency>
  3) reimport all Maven libraries to get the latest published SNAPSHOT library
     intellij shortcut: Shift + Cmd + A (click "reimport all Maven libraries")

# maven versions
  square bracket ( [ & ] ) means "closed" (inclusive)
  parenthesis ( ( & ) ) means "open" (exclusive)

  ex. in Maven repository, com.foo:my-foo has the following metadata:

  <?xml version="1.0" encoding="UTF-8"?>
  <metadata>
    <groupId>com.foo</groupId>
    <artifactId>my-foo</artifactId>
    <version>2.0.0</version>
    <versioning>
      <release>1.1.1</release>
      <versions>
        <version>1.0</version>
        <version>1.0.1</version>
        <version>1.1</version>
        <version>1.1.1</version>
        <version>2.0.0</version>
      </versions>
      <lastUpdated>20090722140000</lastUpdated>
    </versioning>
  </metadata>

  1) Declare an explicit version (always resolve to 1.0.1 unless a collision occurs, then maven select a matching one)
     <version>1.0.1</version>
  2) Declare an exact version (always resolve to 1.0.1):
     <version>[1.0.1]</version>
  3) Declare a version range for all 1.x (currently resolve to 1.1.1):
     <version>[1.0.0,2.0.0)</version>
  4) Declare an open-ended version range (resolve to 2.0.0):
     <version>[1.0.0,)</version>

# add 3rd-party dependency
ex. import backtype.storm.LocalCluster; # if storm is not found in the dependencies
    1) add the dependency in pom.xml:
    <dependencies>
        <dependency>
            <groupId>org.apache.storm</groupId>
            <artifactId>storm-core</artifactId>
            <version>0.10.0</version>
            #<scope>provided</scope>            # Use "provided" scope to keep storm out of the jar-with-dependencies (remove this to include the dependency with default scope "compile")
        </dependency>
    </dependencies>
    2) reimport All maven libraries at intellij # resolve the dependencies again
    3) run mvn -DskipTests package              # run packaging the library to verify if the current library can be built

# mvn -X <package-name>
mvn -X <package-name>
  shows all explicit and transitive dependencies for a package
  this helps to identify conflicts
ex. mvn -X org.apache:org.apache.commons

# Uber JAR: a JAR containing everything
1) an artifact contains only the classes/resources of itself, so Maven will be responsible to find out all artifacts (JARs) that the project depends on when the project is built
2) an uber-jar takes all dependencies and extract the content of the dependencies and put them with the classes/resources of the project itself, in one big JAR
3) it is easy for execution, because you will need only one big JAR instead of many small JARs to run your app

# maven libary shading
ref: https://softwareengineering.stackexchange.com/questions/297276/what-is-a-shaded-java-dependency
1) create uber-jar for ease of deployment is one use case of shade plugin
   ex. 
   problem:

     Qux -> Bar:2.0
         -> Foo -> Bar:1.0 (version conflicts)

     Foo library depends on a specific version (ex. 1.0) of Bar library and cannot make use of other version of Bar lib (because of API change, etc.)
     Qux project depends on Foo and a newer version Bar:2.0 (because Qux needs to use new feature in Bar:2.0)
     then either Qux using Bar:2.0 or Foo using Bar:1.0 will not work
   solution:
     use shade plugin to rename the usage of Bar:1.0, so that all classes in Bar:1.0 jar are embedded in Foo jar

     Qux -> Bar:2.0
         -> Foo -> Bar:1.0 (shaded, ex. renamed to com.shaded.bar, and embeded in Foo jar)
2) edit pom.xml
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-shade-plugin</artifactId>
                <version>2.4.1</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <relocations>
                                # ex. dependency "com.yahoo.vespa:vespa-http-client:jar:6.248.120" and its subdependency "com.yahoo.vespa:vespajlib:jar:6.248.120" has classes in package "com.yahoo.vespa"
                                #     all references to these classes are renamed to classes of package "com.yahoo.vespa.shade" (and class files are moved to location: com/yahoo/vespa/shade/)
                                #     this makes uses of package "com.yahoo.vespa" of this project to the packages with specific versions: "vespa-http-client:jar:6.248.120" and "vespajlib:jar:6.248.120"
                                #     in other words, this project are "partly" depending on artifects "vespa-http-client:jar:6.248.120" and "vespajlib:jar:6.248.120"
                                #     hence, when the project code are run on some environment with different dependencies installed, it won't break
                                <relocation>
                                    <pattern>com.yahoo.vespa</pattern>
                                    <shadedPattern>com.yahoo.vespa.shade</shadedPattern>
                                </relocation>
                            </relocations>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
3) mvn clean compile package
   package the project with shaded class files
4) review the built library is indeed shaded
   jar tf target/foo.jar
   
# add repository in pom.xml
<project ...>
    <distributionManagement>
        <snapshotRepository>
            <id>maven-local-snapshot</id>
            <url>scpexe://myartifactory.mydomain.com:4443/maven-local-snapshot/</url>
        </snapshotRepository>
        <repository>
            <id>maven-local-release</id>
            <url>scpexe://myartifactory.mydomain.com:4443/maven-local-release/</url>
        </repository>
    </distributionManagement>
    <repositories>
        <repository>
            <id>My another maven dist</id>
            <url>http://artifactory.mydomain.com:9999/proximity/repository/public</url>
        </repository>
    </repositories>
</project>

# options
1) -B,--batch-mode: run in non-interactive (batch)
2) -D,--define <arg>: define a system property
   ex. mvn archetype:generate -DgroupId=com.myMaven.app
       mvn exec:java -Dexec.mainClass=com.myMaven.app.App
       mvn -DskipTests=true clean package

# META-INF/
  an internal meta inormation directory
  1) MANIFEST.MF
     manifest file used to define extension and package related data
  2) .DSA: ex. META-INF/BC1024KE.DSA, META-INF/BC2048KE.DSA
     signature block file associated with the signature file with the same base file name
     this file stores the digital signature of the corresponding signature file

# artifactory vs. bintray
1) artifactory: a development-time tool
   for development you need features like:
     support for snapshots
     CI servers metadata integration (a.k.a. build-info)
     on-prem install
     integration with enterprise security systems like SAML
2) bintray: a release, distribution-time tool
   for distribution you need stuff like:
     a global distribution network (CDN)
     extreme throughput and redundancy for downloads
     permission control for external users (entitlements)
     product and EULA support
