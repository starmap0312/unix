# Maven
  1) generate project (download packages from internet to local repository)
     mvn archetype:generate
     ex.
       mvn archetype:generate -DgroupId=com.myMaven.app -DartifactId=HelloMaven \
       -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
         -DgroupId: package group Id, ex. com.myMaven.app (organization or company)
         -DartifactId: the project name, i.e. HelloMaven
         -Dversion: project version (default: 1.0-SNAPSHOT)
         -DarchetypeArtifactId: template used to create the project
  2) pom.xml
     information of the package
       <dependency>
           <groupId>com.myMaven.app</groupId>
           <artifactId>HelloMaven</artifactId>
           <version>1.0-SNAPSHOT</version>
       </dependency>
     groupId:artifactId:version specifies a unique package
       a group can have multiple artifacts (projects)
       a artifact (project) can have multiple versions
  3) compile source (at the folder of pom.xml)
     mvn compile
     - HelloMaven
       - pom.xml
       - src
         - main - java - com - myMaven - app - App.java
         - test - java - com - myMaven - app - AppTest.java
       - target (processed data and final package file)
  4) execute program
     mvn exec:java -Dexec.mainClass=com.myMaven.app.App
     App.java
       public class App {
           public static void main(String[] args) {
               System.out.println("Hello Maven!");
           }
       }
  5) create package file
     mvn package
     create .jar file (packaging) based on pom.xml
     create .war file (packaging) based on pom.xml, which will be deployed to Tomcat/JBoss server
  6) clean/remove target folder
     mvn clean

# Maven Lifecycle
  1) Clean lifecycle
     clean: remove all files generated by the previous build
  2) Default lifecycle
     compile: compile the source code of the project
     test: run tests using a suitable unit testing framework
     package: take the compiled code and package it in its distributable format, ex. .jar
     itegration-test: process and deploy the package if necessary into an environment for running integration test
     install: install the package into the local repository, for use as a dependency in other projects locally
     deploy: copies the final package to the remote repository for sharing with other projects
  3) Site lifecycle
     site: generate the project's site documentation
     site-deploy: deploy the generated site documentation to the specified web server
  ex.
    mvn package
    execute phases: compile, test-compile, test, mvn jar:jar

# commonly execute goals
  1) mvn compile
  2) mvn test
  3) mvn package
  4) mvn install: install package into local repository
  5) mvn source:jar: pack the source code into a .jar
  6) mvn jetty:run / mvn tomcat:run: execute web project
  7) mvn javadoc:jar: generate java api .jar file
  8) mvn exec:exec: execute project

# ~/.m2/settings.xml: configuration file
  1) element in the file contains elements used to define values which configure Maven execution in various ways
     ex. values such as the local repository location, alternate remote repository servers, and authentication information
  2) it's like the pom.xml, but should not be bundled to any specific project, or distributed to an audience
