# network access control in linux
  restrict who can access the services
  1) kernel filter (netfilter)
     extract the packet header: ex. MAC/IP addresses, or TCP/UDP/ICMP packet information
     (i.e. OSI Layers 2, 3, and 4)
     use the iptable
  2) TCP wrapper
     controlled by tcpd
     restrict who can access which daemon/process
     it has nothing to do with port but daemon names: ex. vsftpd (no matter what port it serves)
  3) applicaiton access control (ex. apache)
  4) firewall/router: ex. squid

  network packets -> firewall (netfilter/tcp wrappers) -> server application -> SELinux/filesystem

# TCP wrappers: used to grant or deny access to services on your machine
  1) a library that provides simple access control and standardized logging for supported
     applications that accept connections over a network
  2) to find out if a service uses the TCP wrapper
     run command: ex. ldd $(which sshd) | grep libwrap ==> libwrap.so.0
  3) access control to services that uses TCP wrapper
     a) xinetd controlled network services: find config under /etc/xinetd.d
     b) tcp wrapped network services: pop3, sshd, vsftpd, telnet, imap, etc.

     incoming requests --> Firewall --> TCP Wrapper --> xinetd --> xinetd controlled services
                                         |
                                         -------------------------> tcp wrapped services
  4) access control files
     a) /etc/hosts.allow: allow connections in this list
        ex. ALL : 192.168.0.1/255.255.255.0
        in.telnetd: .ntu.edu.tw: Allow
     b) /etc/hosts.deny: if no match in item 1, deny connections in this list
        ex. sshd: ALL

  (any changes to /etc/hosts.allow and /etc/hosts.deny will take effect immediately)

# xinetd: extended Internet daemon
  1) a super daemon which listens for incoming requests over a network and launches the
     appropriate service for that request
  2) access to the xinetd services can be controlled by TCP Wrappers

# iptable: kernel filter
  1) view all iptable rules: iptables --list
  2) delete iptable rules: iptables --flush

     packets -> rule1 -> rule2 -> rule3 ... -> default policy
                  | yes    | yes    | yes
               action1  action2  action3

  3) three tables
     a) filter: packets to enter the localhost
     b) nat: network address translation, packets that go to the internal LAN
     c) mangle: router flag for special packets, rarely used

      filter:input -> localhost -> filter:output
           |                            |
      <packets in>                 <packets out>

      (input and output chains)

  (any changes to iptables will take effect immediately)

  commands:
    iptables -t filter -L -n (-L: list all rules, -n: numeric, avoid long reverse dns lookups)
      Chain INPUT (policy ACCEPT)
      target prot opt source     destination
      ACCEPT all  --  0.0.0.0/0  0.0.0.0/0   state RELATED,ESTABLISHED <= (a)
      ACCEPT icmp --  0.0.0.0/0  0.0.0.0/0                             <= (b)
      (a) accept all protocol packets from any source address, to any destination address
          as long as the state of the packets is either RELATED or ESTABLISHED
      (b) accept all icmp packets from all source and destination

  example script of firewall setting:
    #!/bin/bash
    PATH=/sbin:/bin:/usr/sbin:/usr/bin; export PATH

    a) clear all rules
       iptables -F
       iptables -X
       iptables -Z
       (-F, --flush [chain]: flush the selected chain, deleting all the rules one by one)
       (-X, --delete-chain [chain]: delete the optional user-defined chain specified)
       (-Z, --zero [chain]: zero the  packet and byte counters in the given chain)

    b) set policies
       iptables -P INPUT   DROP
       iptables -P OUTPUT  ACCEPT
       iptables -P FORWARD ACCEPT
       (policy: for packet that does not match any rule)
       (if INPUT policy is DROP, even the response packets from outgoing connections will be dropped)

    c) set rules
       iptables -A INPUT -i lo -j ACCEPT
       iptables -A INPUT -i eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT
       iptables -A INPUT -i eth0 -p tcp -s 192.168.0.1 -j DROP
       (-A, --append chain: append one or more rules to the end of the selected chain)
       (-j, --jump target: specifies the target rule, i.e. what to do if packet matches rule)
       (-i, --in-interface name: interface via which a packet was received)
       (-p, --protocol: the protocol of the rule or of the packet to check)

    d) write the changes to config file
       /etc/init.d/iptables save

# turn on iptable
  chkconfig iptables on
  service iptables start   ==> restart the firewall
  service iptables restart ==> restart the firewall
  service iptables stop    ==> stop the firewall

# display the iptable status
  sudo iptables -Lnv --line-numbers
    -v, --verbose: show the interface name, the rule options (if any), and the TOS masks

# ipset: administration tool for IP sets
  an extension to iptables that allows you to create firewall rules that match entire "sets" of
    addresses at once
  unlike normal iptables chains: stored and traversed linearly (slow)
    IP sets are stored in indexed data structures (lookups very efficient)
  ex1.
    ipset -N myset iphash
    ipset -A myset 1.1.1.1
    ipset -A myset 2.2.2.2

    create a new set (myset of type iphash) with two addresses (1.1.1.1 and 2.2.2.2)

    iptables -A INPUT -m set --set myset src -j DROP
    
    -m set --set myset src: match packets whose source header matches (i.e. contained within)
      the set named myset
      (dst: match on destination)

  ex2.
    ipset create myset hash:net,port ==> create a set based on subnets
    ipset add myset 192.168.0/24,25
    ipset add myset 10.1.0.0/16,80
    ipset test myset 192.168.0/24,25
    (hash:ip,port ==> create a set based on ips)

  ipset list                     ==> view the sets
  ipset destroy myset            ==> delete the set named myset
  ipset destroy                  ==> delete all sets
