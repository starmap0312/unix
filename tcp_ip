# TCP/IP
  a set of networking protocols used to construct global internet

# differences between TCP and UDP
  TCP (Transmission Control Protocol): connection oriented. once a connection is established,
    data can be set bidirectional
    usage: suited for applications that require high reliability and transmission time is less
      critical
    reliability: data transferred remains intact and arrives in the order it was sent
    data flow control: requires three packets to set up a socket connection before data are sent
       (SYN, SYN-ACK, ACK). TCP handles reliability and congestion control
    error checking: has error checking
    ex. HTTP, HTTPS, FTP, SMTP, Telnet
  UDP (User Datagram Protocol): simpler and connectionless. multiple messages are
    sent as packets in chunks using UDP. one program send a load of packets to antoher program and
    that is the end of the relationship
    usage: suitable for applications that need fast transmission, such as games. the stateless
      nature is useful for servers that answer small queries from huge numbers of clients
    reliability: no guarantee that the packets sent would reach at all
    data flow control: no flow control
    error checking: has error checking but no recovery options
    ex. DNS, DHCP, TFTP, SNMP, RIP, VOIP

# does IP protect data on the network?
  IP leaves all issues of data protection to the transport protocal. both TCP and UDP have
    have mechanisms that guarantee that the data they deliver to an application is correct.
  IP layer deals with the correct destination of packets, whereas the transport layer(TCP/
    UDP/SCTP) checks if the data are delivered correctly using checksum mechanism.

# what is the data unit of transport layer?
  segment

# how data is sent by IP layer?
  packet

# can we detect a TCP connection has crashed?
  no. detecting crashed system over TCP/IP is difficult

# what OSI and TCP/IP stand for?
  OSI: Open System Interconnection
  TCP/IP: Transmission Control Protocol/Internet Protocol

# the four layers of TCP/IP stack, also called the DoD model, are Application/Process,
  Host-to-Host, Internet, and Network Access
    the Host-to-Host layer is equivalent to the Transport layer of the OSI model
    the Internet layer is equivalent to the Network layer of the OSI model

# SMTP/HTTP/FTP services use TCP, whereas DHCP/SNMP/TFTP use UDP
  both FTP and Telnet use TCP at the Transport layer; however, they both are Application
    layer protocols

# Internet Control Message Protocol (ICMP)
  used to send error messages through the network. every segment or ICMP payload must be
    encapsulated within an IP datagram (packet).

# Address Resolution Protocol (ARP)
  used to find hardware address from a known IP address

# DNS
  uses both TCP and UDP. DNS uses TCP for zone exchanges between servers and uses UDP when 
    a client is trying to resolve a hostname to an IP address

# differences between ip, tcp, and http
  ip:
     data communication across internet
     deliver packets from source host to destination host based on their addresses
     ip defines addressing methods and structures for the encapsulation of the packets
  tcp:
     provides communication between two systems: ex. web browser (application) and web server (ip)
     supports size control, flow control, data exchange rate, network traffic congestion
     program sends a large piece of data across internet using IP, instead of breaking
       the data into sizes that will fit the IP 
     the protocol handles the details of the ip transfer, ex. retransmission of packets,
       rearrangement of the order of packets, minimization of network congestion
  http:
     has sessions: a sequence of request/response transactions that occur on the network
     (i.e. http requests and responses)

# HTTP status code
  403: Forbidden
    server can be reached and understood the request, but refuses to take any further action
    ex. the web server is configured to deny access to the requested resource by the client

# TCP connection states
  1) LISTENING
  2) ESTABLISHED
  3) CLOSE_WAIT: the remote endpoint (other side of the connection) has closed the connection
  4) TIME_WAIT: the local endpoint (this side) has closed the connection
       the connection is being kept around so that any delayed packets can be matched to the connection and
       handled appropriately

     eatablish a TCP connection:

                initiator                    receiver

                connect()                    listen()

                            ----- SYN ---->  (SYN-RECEIVED) 
                            <-- SYN-ACK ---
                            ----- ACK ---->  (ESTABLISHED) 

     close a TCP connection:

                initiator                    receiver

              (ESTABLISHED) ----- FIN ----> (CLOSE_WAIT)
                            <---- ACK -----
               (TIME_WAIT)  <---- FIN -----
                   .        ----- ACK ---->  (CLOSE)
                   .
                   . (wait ~60 secs)
                   .
                (CLOSE) 

