# create virtualenv
  virtualenv --python=/usr/local/bin/python3.5 myproject
  source myproject/bin/activate
  pip install <python_pkg> 

# pip commands
  pip search <pkg_name>: search PyPI for packages
  pip show <pkg_name>: show information about installed packages
  pip list: list installed packages
  pip install <pkg_name>: install a single package
  pip install <pkg_name>==<version>: install a single package with a specific version
    ex. pip install django_modeltranslation==0.4.0
  pip freeze > requirements.txt
    output a package manifest to the terminal (requirements.txt should have specific versions for each package)
    ex.
      Django==1.7.11
      mysqlclient==1.3.7
  pip install -r requirements.txt
    install a list of packages with version requirements needed to create a working application environment
  pip install -c constraint.txt -r requirements.txt
    install a list of packages with version requirements which refer to a constraints file
    ex. 
    i) use requirements.txt:
       * if you only want to specify the version of required packages, not the version of its dependencies
       (requirements.txt)
       Django==1.8.12
       django-allauth==0.25.2   # django-allauth requires additional packages: ex. oauthlib, python-openid, defusedxml, etc.
   ii) use requirements.txt without constraints.txt:
       * if you want to specify the version of both all the required packages and its dependencies, the requirements.txt will get ugly (due to different python versions)
       (requirements.txt)
       Django==1.8.12                                   # required package
       django-allauth==0.25.2                           # required package
       oauthlib==1.0.3                                  # dependency of required package: django-allauth depends on this 
       python-openid==2.2.5   ; python_version < '3.0'  # dependency of required package: django-allauth depends on this in python2 
       python3-openid==3.0.10 ; python_version >= '3.0' # dependency of required package: django-allauth depends on this in python3
       defusedxml==0.4.1      ; python_version >= '3.0' # dependency of required package: python3-openid depends on this (only in python3)
  iii) use requirements.txt with constraints.txt:
      * if you want to specify both the version of the required packages and its dependencies
      * using constraints.txt will make the package management cleaner: as constraints are only installed if a package requires them, and are ignored otherwise
      (requirements.txt)
      Django==1.8.12                                   # required package
      django-allauth==0.25.2                           # required package
      (constraints.txt)
      oauthlib==1.0.3          # django-allauth depends on this
      python-openid==2.2.5     # django-allauth depends on this in python2 (installed in python2, and ignored in python3)
      python3-openid==3.0.10   # django-allauth depends on this in python3 (installed in python3, and ignored in python2)
      defusedxml==0.4.1        # python3-openid depends on this            (installed in python3, and ignored in python2)

# setup.py
  ex.
  from setuptools import setup
  setup(
       name="yahoo.contrib.project",
       scripts=['scripts/program1.py', 'scripts/program2.py'], # will be put in user bin folder
       install_requires = [                                    # all dependencies listed in the install_requires will be installed when the package is installed
            'requests',
            'django>=1.7',
            'django-redis-cache',
            'django-rest-framework',
            'redislite'
       ]
  )

# difference with install_requires setting in the setup.py: no package versions in the install_requires
  install_requires: abstract dependencies, i.e. the minimal dependencies needed for the package to function
  requirements.txt: concrete dependencies, i.e. needed to create a specific application environment
    this file contains any "optional" package requirements needed to create the environment as well as packages that are dependencies of other packages that are being used

# virtualenv use case
  virtualenv --python=/usr/local/bin/python3.5 myproject
  source myproject/bin/activate
  pip install -r requirements.txt

# str type vs unicode type
  1) str: a plain sequence of bytes (in Python3, str is called bytes)
  2) unicode: a general representation of some text, which can be encoded in many different ways
     (text is a sequence of code points which may be bigger than a single byte)
  3) literal strings are unicode by default in Python3, i.e. unicode of Python2 is equivalent to str in Python3
  ex.
    >>> text = 'á'     <== unicode string in Python3, i.e. text = u'á'
    >>> len(text)   
        1              <== one code point
    >>> text.encode('utf8')
        b'\xc3\xa1'    <== bytes literal 

# command-line json.tool
  1) validate json file:
     python -m 'json.tool' /path/to/json/file 

# common issues
1) 'ascii' codec cannot encode character:
   python str is ascii encoded, so it cannot encode unicode character, ex. u'中'
   ex.
     >>> u'中'
     u'\u4e2d'

     # a unicode char cannot be converted into an ascii str
     >>> str(u'中')
     UnicodeEncodeError: 'ascii' codec cannot encode character u'\u4e2d' in position 0: ordinal not in range(128)

   solution:
     # a utf8 char can be converted into an ascii str
     >>> str(u'中'.encode('utf8'))
     '\xe4\xb8\xad'
     # or simply
     >>> '中'
     '\xe4\xb8\xad'
