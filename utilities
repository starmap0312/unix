# list all the links from a directory: ls -lrt | grep "^l"
  options:
    -l: list long format
    -t: sort by modified time (new to old)
    -rt: sort by reversed modified time (old to new)
  grep "^l" => grep lines that begins with l (which represents link files)

# scp: copy file from one host to other
  scp local_filepath username@xx.xx.xx.xx:/remote_folder_path
  scp username@xx.xx.xx.xx:/remote_filepath local_folder_path
  rsync -a local_folder_path1 local_folder_path2
  rsync -a -e ssh username@xx.xx.xx.xx:/remote_folder_path local_folder_path
  sftp username@xx.xx.xx.xx (login ftp and operate, ex. cd/ls/mkdir/rmdir/rm/pwd/put/get/exit)

# what is nohup in UNIX?
  nohup is a command used to run process in background, but unlike & the process started with
    nohup will not stop even if the user who started the process log off the system
    in contrast, use & the process will terminate as soon as the user log off the system

# tar:
  tar cvf archive_name.tar dirname/
  tar xvf archive_name.tar

# diff:
  diff -w filename1 filename2: ignore white spaces when comparing
  ("Ilov eyo u" == "I love you")

# vimdiff
  vimdiff filename1 filename2
  Ctrl + w, then leftArrow / rightArrow ==> jump to the left / right window
  :qa ==> quit all
  :wa ==> write all
  :wqa ==> write and then quit all
  :qa! ==> force to quit all

# vim
  vim -O filename1 filename2
  option -O: open a window for each file
  Ctrl + w: jump to the left / right window

# sort:
  sort filename: sort a file in an ascending order
  sort -r filename: sort a file in a descending order
  sort -t: -k 3n /etc/passwd ==> sort file by the 3rd field

# export:
  export VAR_NAME=xxxxxxxxxxxxxxx (export an environment variable)

# xargs: read items from STDIN or pipes, delimited by blanks or newlines, and executes command
  ex.
  echo 1 2 3 4 | xargs echo
  find . -name "*.bak" -type f -print | xargs rm -f
  ls *.jpg | xargs -n1 -i cp {} /path/to/folder ==> copy all jpg files to /path/to/folder
  find . -name *.jpg -type f -print | xargs tar -zxvf archive.tar.gz ==> compress all jpg files

# gzip and bzip2:
  gzip filename ==> create a filename.gz compressed file
  gzip -d filename.gz ==> uncompress filename.gz file
  bzip2 filename ==> create a filename.bz2 compressed file
  bzip2 -d filename.bz2 ==> uncompress filename.bz2 file

# shutdown
  shutdown -h now ==> shutdown
  shutdown -r now ==> reboot
  shutdown -h +10 ==> shutdown after 10 seconds

# service:
  service ssh status   ==> list the status of a service
  service ssh restart  ==> restart a service
  service --status-all ==> list the status of all services

# cp
  cp -p filename1 filename2 ==> preserving the mode, ownership, and timestamp
  cp -i filename1 filename2 ==> prompt for confirmation before overwritting

# mv
  mv -i filename1 filename2 ==> prompt for confirmation before overwritting

# cat
  cat -n filename ==> prepend the line number

# mount
  mount ==> print the list of mounted file systems
  /etc/fstab ==> edit for automatic mounting when system restarts

# chmod
  chmod -R ug+rwx folder_name/ ==> apply file permissions recursively

# chown
  chown -R owner_name:group_name folder_name/ ==> change ownership recursively

# passwd
  passwd [username] ==> change user's password
  passwd -d username ==> remove user's password, user can login without password

# uname
  uname -a ==> display information about system, ex. kernel name, host name, kernel release number

# whereis
  whereis ls ==> find out where a command exists

# whatis
  whatis ls ==> display a single line description about a command

# locate
  locate crontab ==> search for the location of a specific file (or group of files)
  (showing all filenames in the system that contain the word crontab)

# tail
  tail -n 5 filename ==> print the last 5 lines of file
  tail -f log_file ==> view the content of log_file in real-time, press ctrl-c to exit

# su
  su - user_name ==> switch to another user_name (super user do not need to enter password)
  su - user_name -c 'ls' ==> execute only one command 'ls' as user_name

# mysql
  mysql -u user_name -p ==> connect to the local mysql server
  mysql -u user_name -p -h 10.1.168.72 ==> connect to a remote mysql server

# date
  date ==> show the system date
  date -s "01/31/2012 23:59:53" ==> set the system date

# wget
  wget http://www.google.com ==> download file from the internet
  wget -O filename http://www.google.com ==> download and save as filename from the internet

# ldd: print shared library dependencies
  ldd filename ==> list all dynamic libraries used by an executable
  (use pmap to view the libraries used by a running process)

# zcat/zmore/zless
  uncompress .gz file and write the uncompressed data on standard output

# tee: direct to both stdout and a file
  echo helloworld | tee filename

# strip command
  discard symbols from object files

# mktemp commnad
  mktemp: make temporary file (unique)
  mktemp -d: make temporary directory (unique)

# expand: convert tabs to spaces
  ex.
    yum --showduplicates list docker-engine | expand

# echo
  options:
    -n: do not output the trailing newline (no newlines)
    -e: enable interpretation of backslash escapes
  ex.
    echo name\taddress   ==> nametaddress
    echo "name\taddress" ==> name       address
    for i in filename0[0-5];
      do echo -e $i"\t";
    done
    (-e: enable "\t", i.e. tab escape)

# curl
  options:
    -H, --header: specify the header (overwrite the default header) when getting a web page
    -v: verbose
    -s, --slient: quiet mode. do not show progress meter or error messages
  ex.
    curl -v -H "Host:www.yahoo.com" http://www.google.com

# diff
  diff filename1 filename2
  diff -qr dir1 dir2
    options:
    -q: quick
    -r: recursive

# strace: System-calls Trace
  1) display the system calls used by a process and the signals received by the process
  2) used for debugging and troubleshooting the execution of an executable
  3) useful when you do not have the source code but would like to debug a program
  ex.
    strace ls
    strace -e open ls: display only a specifical system call
  options
    -e open: display only system call open
    -o filename: write the output to filename
    -c: display the time, count, and errors of each system

# dig
