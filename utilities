# list all the links from a directory
  ls -lrt | grep "^l"
    grep "^l" => grep lines that begins with l (which represents link files)
  options:
    -l: list long format
    -t: sort by modified time (new to old)
    -rt: sort by reversed modified time (old to new)

# ls
  ls -1 /path/to/folder/*.txt
    filename1.txt
    filename2.txt
  option:
    -1: list one file per line

# scp: copy file from one host to other
  scp local_filepath username@xx.xx.xx.xx:/remote_folder_path
  scp username@xx.xx.xx.xx:/remote_filepath local_folder_path
  scp -r username@xx.xx.xx.xx:/remote_folder_path/ local_folder_path
  rsync -a local_folder_path1 local_folder_path2
  rsync -a -e ssh username@xx.xx.xx.xx:/remote_folder_path local_folder_path
  sftp username@xx.xx.xx.xx (login ftp and operate, ex. cd/ls/mkdir/rmdir/rm/pwd/put/get/exit)

# what is nohup in UNIX?
  nohup is a command used to run process in background, but unlike & the process started with
    nohup will not stop even if the user who started the process log off the system
    in contrast, use & the process will terminate as soon as the user log off the system

# tar:
  backup a directory (ex. /var/spool/cron, /etc, /home, /var, etc.)
    tar cvf archive_name.tar dirname/
    tar xvf archive_name.tar
    tar -zcvf archive-name.tar.gz dirname/
    tar -zxvf archive-name.tar.gz
      -z: Compress archive using gzip program
      -c: Create archive
      -v: Verbose i.e display progress while creating archive
      -f: Archive File name
      -x: Extract files

# bzip2
  1) compress a single file
     bzip2 filename                      ==> compress filename into filename.bz2
  2) compress multiple files
     bzip2 filename1 filename2 filename3 ==> compress into filename1.bz2, filename2.bz2, filename3.bz3
  3) compress and keep the original file
     bzip2 -k filename                   ==> compress into filename.bz2 and keep original filename
  4) decompress a bz2 file
     bzip2 -d filename.bz2               ==> decompress filename.bz2 into filename
  5) decompress and keep the original bz2 file
     bzip2 -k filename.bz2               ==> decompress into filename and keep original filename.bz2
  6) integrity test
     bzip2 -tv filename.bz2              ==> -t, -test: check integrity of a bz2 file

# diff:
  diff filename1 filename2
  diff -w filename1 filename2: ignore white spaces when comparing
    -w, --ignore-all-space: i.e. "Ilov eyo u" == "I love you"
  diff -qr dir1 dir2
    -q: quick
    -r: recursive

# vimdiff
  vimdiff filename1 filename2
  Ctrl + w, then leftArrow / rightArrow ==> jump to the left / right window
  :qa ==> quit all
  :wa ==> write all
  :wqa ==> write and then quit all
  :qa! ==> force to quit all

# vim
  vim -O filename1 filename2
  option -O: open a window for each file
  Ctrl + w: jump to the left / right window
  :set list  ==> display whitespace, end of lines ($), and carriage returns (^M)
  /\ckeyword ==> case-insensitive search <keyword>

# sort:
  sort filename: sort a file in an ascending order
  sort -r filename: sort a file in a descending order
  sort -t: -k 3n /etc/passwd ==> sort file by the 3rd field
  sort -n: sort in numeric order
    ex. sort     => 12  2 
        sort -n  =>  2 12

# export:
  export VAR_NAME=xxxxxxxxxxxxxxx (export an environment variable)

# xargs: read items from STDIN or pipes, delimited by blanks or newlines, and executes command
  1) find . -name "*.bak" -type f -print | xargs rm -f
  2) find . -name '*.py' | xargs wc -l
     recursively find all Python files and count the number of lines
  3) find . -name '*.py' | xargs grep 'import'
     recursively find all Python files and search them for the word ‘import’
  4) ls *.jpg | xargs -n1 -i cp {} /path/to/folder
     copy all jpg files to /path/to/folder
  5) find . -name *.jpg -type f -print | xargs tar -zxvf archive.tar.gz
     compress all jpg files
  6) <STDOUT PIPE> | xargs -P 20 -I{} <cmd> {} == xargs -P 20 <cmd> {}
     -P max-procs: run up to max-procs processes at a time (default 1)
  7) echo {0..3} | xargs -n 2
     0 1
     2 3
  8) echo {11..14} | xargs -n 1 | xargs -I{} -P 4 ping -c 1 int{}.img.search.gq1.yahoo.com
     -n 1: specifies how many arguments at a time to supply to the given command
     -P 4: run up to 4 processes at a time (default 1)

# gzip and bzip2:
  gzip filename ==> create a filename.gz compressed file
  gzip -d filename.gz ==> uncompress filename.gz file
  bzip2 filename ==> create a filename.bz2 compressed file
  bzip2 -d filename.bz2 ==> uncompress filename.bz2 file

# shutdown
  shutdown -h now ==> shutdown
  shutdown -r now ==> reboot
  shutdown -h +10 ==> shutdown after 10 seconds

# service:
  service ssh status   ==> list the status of a service
  service ssh restart  ==> restart a service
  service --status-all ==> list the status of all services

# cp
  cp -p filename1 filename2 ==> preserving the mode, ownership, and timestamp
  cp -i filename1 filename2 ==> prompt for confirmation before overwritting

# mv
  mv -i filename1 filename2 ==> prompt for confirmation before overwritting

# cat
  cat -n filename ==> prepend the line number

# mount
  mount ==> print the list of mounted file systems
  /etc/fstab ==> edit for automatic mounting when system restarts

# chmod
  chmod -R ug+rwx folder_name/ ==> apply file permissions recursively

# chown
  chown -R owner_name:group_name folder_name/ ==> change ownership recursively

# passwd
  passwd [username] ==> change user's password
  passwd -d username ==> remove user's password, user can login without password
  to safely edit /etc/passwd and /etc/shadow
    sudo vipw: opens the /etc/passwd file
    sudo vipw -s: opens the /etc/shadow file
    sudo vigr: opens the /etc/group file
    sudo vigr -s: opens the /etc/gshadow file

# uname
  uname -a ==> display information about system, ex. kernel name, host name, kernel release number

# whereis
  whereis ls ==> find out where a command exists

# whatis
  whatis ls ==> display a single line description about a command

# locate
  locate crontab ==> search for the location of a specific file (or group of files)
  (showing all filenames in the system that contain the word crontab)

# tail
  tail -n 5 filename ==> print the last 5 lines of file
  tail -f log_file ==> view the content of log_file in real-time, press ctrl-c to exit

# mysql
  mysql -u username -p ==> connect to the local mysql server
  mysql -u username -p -h 10.1.168.72 ==> connect to a remote mysql server

# date
  date [OPTION]... [+FORMAT]
  date                            ==> show the current system date
  date +%<format-option>          ==> use formatting option to display date command in various formats
  options:
    -s: set time specified 
    -d, --date=STRING: display date specified (display time described by STRING, not 'now')
    %s: day of month (e.g, 01) 
  ex.
    date -s "01/31/2012 23:59:53" ==> set the system date
    date -d yesterday             ==> show yesterday's system date
      Mon May  9 01:09:50 PDT 2016
    date +%d                      ==> display only day of month information
      22
    date +%F
      2016-05-18
    date +%s                      ==> display seconds since 1970-01-01 00:00:00 UTC
      1466651401
    date +%d -d yesterday         ==> show yesterday's system date with only day of month info
    date -d @1462867742.066994    ==> convert integer to date
      Tue May 10 01:09:02 PDT 2016

# wget
  wget http://www.google.com ==> download file from the internet
  wget -O filename http://www.google.com ==> download and save as filename from the internet

# ldd: print shared library dependencies
  ldd filename ==> list all dynamic libraries used by an executable
  (use pmap to view the libraries used by a running process)

# zcat/zmore/zless
  uncompress .gz file and write the uncompressed data on standard output
  zcat filename.gz

# tee: direct to both stdout and a file
  echo helloworld | tee filename
  echo helloworld | tee -a filename
    -a, --append: append to the file end, do not overwrite

# strip command
  discard symbols from object files

# mktemp commnad
  by default, the command creates a unique temporary file / directory under $TMPDIR (ex. /tmp)
  1) mktemp: make temporary file
  2) mktemp -d: make temporary directory
  3) mktemp filename.XXXXX  ==> the XXXXX will be replaced in order to create a unique filename
     ex.
       OUT=$(mktemp /tmp/output.XXXXXXXXXX) || { echo "Failed to create temp file"; exit 1; }
       echo "Today is $(date)"  >> $OUT

# expand: convert tabs to spaces
  ex.
    yum --showduplicates list docker-engine | expand

# echo
  options:
    -n: do not output the trailing newline (no newlines)
    -e: enable interpretation of backslash escapes
  ex.
    echo name\taddress   ==> nametaddress
    echo "name\taddress" ==> name       address
    for i in filename0[0-5];
      do echo -e $i"\t";
    done
    (-e: enable "\t", i.e. tab escape)

# curl
  options:
    -H, --header: specify the header (overwrite the default header) when getting a web page
    -v: verbose (including headers & webpage)
    -s, --slient: quiet mode. do not show progress meter or error messages (only the webpage)
    -I, --head: fetch the HTTP-header only (HTTP/FTP/FILE)
                when used on an FTP or FILE file, curl displays the file size and last modification time only
  ex.
    curl -v -H "Host:www.google.com.tw" http://www.google.com.tw
  ex.
    curl -I http://www.google.com.tw

    HTTP/1.1 200 OK
    Date: Sat, 16 Jul 2016 11:51:09 GMT
    Expires: -1
    Content-Type: text/html; charset=Big5
    Server: gws
    Set-Cookie: NID=82=KTngbx; expires=Sun, 15-Jan-2017 11:51:09 GMT; path=/; domain=.google.com.tw

# strace: System-calls Trace
  1) display the system calls used by a process and the signals received by the process
  2) used for debugging and troubleshooting the execution of an executable
  3) useful when you do not have the source code but would like to debug a program
  ex.
    strace ls
    strace -e open ls: display only a specifical system call
  options
    -e open: display only system call open
    -o filename: write the output to filename
    -c: display the time, count, and errors of each system

# dig
  1) find out how the ip address of a host is resolved by its <fqdn>
  2) dig [options] <fqdn> [@server]
  options:
    @server: specify the dns server ip address (default: dns configured in /etc/resolv.conf)
  ex. dig yahoo.search.com
  sections:
    QUESTION: ask the ip address of <fqdn>
    ANSWER: the return ip address of <fqdn>
    AUTHORITY: one can see which dns server provides the answer
    (the number at 2nd column indicates the seconds allowed for the user to cache this record)

  options:
    -x: reverse query of <ip> to its <fqdn>
  ex. dig -x 64.30.228.118
  (note: the ip address in QUESTION section is reversed: 118.228.30.64.in-addr.arpa
   this is because for domain name: yahoo < search < com, whereas for ip: 64 > 30 > 228 > 118)

# tmpwatch
  1) removes files which haven’t been accessed for a period of time
  2) daily cron job: /etc/cron.daily/tmpwatch
  3) tmpwatch [options] <hours-untouched> <dirs>
    ex. tmpwatch -x /path/to/exclude -X '/folder/pattern_*' 240 /path/to/watch
        (remove files under /path/to/watch that are not accessed in 240 hours)
  options:
    -u, --atime: access time (ex. cat filename)
    -c, --ctime: status change time (ex. chmod g+w filename)
    -m, --mtime: modified time (ex. echo "new" >> filename)
    -x, --exclude=[path]: exclude files under [path]
    -X, --exclude-pattern=[pattern]: exclude files matches [pattern]
    -d, --nodirs: do not remove directories
    -U, --exclude-user=[username]: do not remove [username] files

# date
  options:
    -d, --date=<STRING>: display time described by <STRING>
    ex. date                  ==> Tue Apr 12 19:48:25 PDT 2016
    ex. date -d '1 days ago'  ==> Mon Apr 11 19:49:52 PDT 2016

# watch: execute a program periodically, showing output fullscreen
  -n, --interval to specify a different interval (default: 2 secs)

# tr: translate or delete characters
  tr [OPTION] SET1 [SET2]
  1) convert lower case to upper case
     tr abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ
     tr [:lower:] [:upper:] < inputfile > outputfile
  2) translate braces into parenthesis
     tr '{}' '()' < inputfile > outputfile
  3) translate white-space to tabs
     echo "This is for testing" | tr [:space:] '\t'
  4) delete specified characters using -d option
     echo "the geek stuff" | tr -d 't'
  5) squeeze repetition of characters using -s
     option: -s, --squeeze-repeats: replace a repeated character with a single character
     echo "This   is   for testing" | tr -s ' '
       This is for testing
     echo "This   is   for testing" | tr -s [:space:] '\t'
       This	is	for	testing
  5) join all the lines in a file into a single line
     tr -s '\n' ' ' < inputfile

# dos2unix: DOS/MAC to UNIX text file format converter
  when vim a filename, if it shows [dos], it means the filename is interpreted as DOS format
  running dos2unix filename converts the file into UNIX format

# xargs: build and execute command lines from standard input
  find /path/to/folder -perm -700 | xargs ls -l
    (find files with permissions at least 700 and perform ls -l to them)
  find . -mtime +15 -type f | xargs -i <cmd> {}
  find . -mtime +15 -type f | xargs -i ls -alh {}
    -i[replace-str]: i.e. -I{} (default)
  rpm -ql yum | xargs -I {} sh -c 'test -f {} && echo {}'
    (note: rpm -ql yum | xargs -I {} test -f {} && echo {} does not work)
    sh -c string: commands are read from string (sh: bash)

# send mail
  1) mail -s "Title" username@email.com < filename
     cat filename / echo "message" | mail -s "Title" username@email.com
  2) sendmail username@email.com < filename
