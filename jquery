# $(): create a new jQuery object by passing a selector to it
  window.jQuery = window.$ = jQuery; // expose jQuery to the global object (can be found in jQuery source code)

  ex. 
    $('#header');    // select the element with attribute id 'header'
    $('li');         // select all list elements (items)

  1) element selector: an element to search for, i.e. the tagName of DOM nodes
    ex.
      $("div")         // JavaScript's getElementsByTagName() function is called to return the appropriate elements

  2) class selector: a class to search for (an element can have multiple classes)
    ex.
      $(".class_name") // JavaScript's getElementsByClassName() function is called

  3) id selector: an ID to search for, specified via the id attribute of an element
    ex.
      $("#id_name")    // JavaScript function document.getElementById() is called

# .addClass(class_name): add the specified class(es) to each element in the set of matched elements
  ex.
    <body>
      <p>This is a paragraph.</p>
      <script>
          $("p").addClass("class_name");
      </script>
    </body>

    // the function will add class "class_name" to all elements with tag name "p"
    i.e. adding class attribute to the <p> element

    <p class="class_name">This is a paragraph.</p>

# .removeClass(class_name): remove the specified class(es) to each element in the set of matched elements

# .hide() & .show(): hide the selected/matched elements
  ex.
    <body>
        <p> not appearing </p>
        <script>
            $("p").hide();
        </script>
    </body>

    // the style attribute of the element is changed
    <p style="display: none;"> not appearing </p>

# .empty(): remove all child nodes and content of the set of matched elements from the DOM
  ex.
    <body>
         <div>
             some text
             <p> a child node </p>
         </div>
         <script>
             $("div").empty();
         </script>
    </body>

    // all child nodes and content of element div are removed
    <div>
    </div>

# .load(): load data from the server and place the returned HTML into the selected/matched element

# $.each(array, callback): a generic iterator function, used to iterate over both objects and arrays
  ex.
    $.each([10, 20, 30], function(index, value) {
        alert(index + ": " + value);
    });

    // output messages
    // 0: 10
    // 1: 20
    // 2: 30

# getJSON(): get JSON data using an AJAX request and output the result
  ex.
    $.getJSON("http://example.com/api", function(data) {
        $.each(data, function(index, value) {
            $("div").append(value + " ");
        });
    });

# $(document).ready(): a page can't be manipulated safely until the document is "ready"
  code inside $(document).ready() will only run once the page DOM is ready for JavaScript code to execute
  ex.
    $(document).ready(function() {
        console.log( "ready!" );
    });

# $.makeArray(obj): convert an array-like object into a true JavaScript array
  ex.
    <body>
        <div>First</div>
        <div>Second</div>
        <div>Third</div>
        <script>
            var elems = document.getElementsByTagName( "div" ); // Returns a NodeList
            var arr = jQuery.makeArray( elems );                // Convert the NodeList to an Array
        </script>
    </body>

