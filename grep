# grep (global regular expression print) command:
  grep -l "pattern" *.txt
    -l: display only filenames with matching pattern
  grep -h "pattern" *.txt
    -h, --no-filename: suppress the prefixing of file names on output
  grep -n "pattern" *.txt
    -n: display line number

  grep -A 3 "pattern": output 3 lines after matched context
  grep -B 3 "pattern": output 3 lines before matched context
  grep -C 3 "pattern": output 3 lines surround matched context

  grep -e "pattern" *.txt
    -e: protect a pattern beginning with a hyphen (-); otherwise, it will be escaped
    ex. echo "-A" | grep -e "-A"
  grep -E "^pattern1|^pattern2" *.txt (egrep "^pattern1|^pattern2" *.txt)
    -E: interpret pattern as extended regexp 

  grep -R, -r "pattern" /path/to/folder/: recursively grep files in target directory

  grep -v "pattern": invert match / exclude pattern
  grep -i "pattern": case insensitive,  ex. grep -i error, matching "Error", "erROr", "ERROR"
  grep -w "pattern" filename: search whole word in a file, i.e. grep '\<keyword\>' filename
  grep -c "pattern": return count of matched lines
  grep --color "pattern" filename: highlight matching with colors

  grep -q "pattern" && <command>
    -q: quiet (no output to stdout), used to execute the second command if the pattern is greped

  grep -o "pattern"
    -o, --only-matching: print only the matched (non-empty) parts of a matching line
    ex. grep -o r..t /etc/passwd
        root
        r/ft
        r:/t
    ex. grep r..t /etc/passwd
        root:x:0:0:root:/root:/bin/bash
        operator:x:11:0:operator:/root:/sbin/nologin
        ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin

  grep "pattern" *substring*
    grep "pattern" for all files with filenames containing substring

  grep -r "pattern" --include="*.py" . (grep -r "pattern" --include=\*.py .)
    grep "pattern" for file extenstion *.py recursively (need quotes/backslash to avoid * being expanded)
    i.e. grep -r "pattern" --include="*.py" . (similiar to: find . -name \*.py or find . -name "*.pyc")
  grep -r "pattern" --exclude="*.py" .
    --exclude=GLOB: 
  grep -r "pattern" --exclude-dir="bootstrap-3.3.6" .
    grep -r "pattern" --exclude-dir="*bootstrap*" .

# regular expressions:
  the following characters are of special meaning
  ^ (carat): match the beginning of a line
  $ (dollar sign): match the end of a line
  \<keyword\> (escaped angle brackets): match a word, surrounded by white spaces, punctuation,
      or line beginnings and endings
  modifier: * (match >= 0 times), ? (match 0 or 1 time), + (match >= 1 times ),
      {n} (match n times), {n,} (match >= n times), {n,m} (match >= n, <= m times)
  [] (brackets): match any the enclosed characters, ex. [aeiou], [0-9](hypen - for range)
  [^]: match any character except the enclosed characters, ex. [^0-9] match non-digit

  note that the meta-characters ?, +, {, }, |, (, ), <, > lose their special meaning when
      use grep. if grep ?, +, {, }, |, (, ), you are actually match them literally
      escape them \?, \+, \{, \}, \|, \(, \), \<, \> to apply their special meaning
      alternatively, use egrep (extended grep), grep -E (no needs to escape symbols)
          (moreover, egrep accepts multi-pattern by concatenating patterns using |)
      in contrast, ^(begins with), $(ends with), .(wildcard), [, ] has special meaning, so
      escape them \^, \$, \., \[, \] to match them literally

  ex. 1. match email addresses: grep '[A-Za-z0-9_.%]\+@[A-Za-z0-9_.%]\+\.[A-Za-z]\+'
                                egrep '[A-Za-z0-9_.%]+@[A-Za-z0-9_.%]+\.[A-Za-z]+'
      2. match 3-5 digits: grep '[0-9]\{3,5\}'
                           egrep '[0-9]{3,5}'

# how to grep phone number pattern in a file, i.e. (xxx) xxx-xxxx or xxx-xxx-xxxx?
  egrep '^[0-9]{3}-[0-9]{3}-[0-9]{4}$|^\([0-9]{3}\) [0-9]{3}-[0-9]{4}$' filename
  egrep '^([0-9]{3}-){2}[0-9]{4}$|^\([0-9]{3}\) [0-9]{3}-[0-9]{4}$' filename

# standard wildcards (globbing patterns)
  used by various command-line utilities to work with multiple files, ex. mv, cp, rm

  ? (question mark): single character
    ex. find /dev -name tty1?
        /dev/tty19
        /dev/tty18
        /dev/tty17

  * (asterisk): zero or more characters
    ex. find . -name "view*"   (find filenames with prefix view)
        ./setting/views.py
        ./api_manager/views.py

  [ ] (square brackets): a range
    ex. find /dev -name "tty1[5-7]"
        /dev/tty17
        /dev/tty16
        /dev/tty15
    ex. find /dev/ -name "vd[a-c]"
        /dev/vdb
        /dev/vda

  { } (curly brackets): an “or” relationship


  [!]: match any character, as long as it is not listed between the [ and ] (logical NOT)
    ex. rm myfile[!9]
        remove all myfile*, i.e. myfile1, myfile2, etc but not myfile9

  \ (backslash): an escape character, i.e. to protect a subsequent special character
